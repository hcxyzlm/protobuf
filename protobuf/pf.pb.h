// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pf.proto

#ifndef PROTOBUF_pf_2eproto__INCLUDED
#define PROTOBUF_pf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pf_2eproto();
void protobuf_AssignDesc_pf_2eproto();
void protobuf_ShutdownFile_pf_2eproto();

class Req_Login;
class Ans_Pro_Login;
class Ans_BaseInfo;
class Ans_GameInfo;
class Req_EnterRoom;
class Ans_Pro_EnterRoom;
class Req_LeaveRoom;
class Ans_Pro_LeaveRoom;
class Req_GetTableList;
class Ans_Pro_GetTableListInfo;
class Ans_SimpleTableInfo;
class Ans_SimpleSeatInfo;
class Req_EnterTable;
class Ans_Pro_OnEnterTable;
class Ans_TablePlayerInfo;
class Ans_Pro_AddTablePlayer;
class Req_SitDown;
class Ans_Pro_NotifySitDown;
class Req_ReadyGame;
class Ans_Pro_ReadyGame;
class Req_StandUp;
class Ans_Pro_NotifyStandUp;
class Req_LeaveTable;
class Ans_Pro_LeaveTable;
class Ans_Pro_DelTablePlayer;
class Pro_GameMsg;
class Ans_Pro_TablePlayerInfoChange;
class ErrorMes;
class Req_Test;
class Ans_Test;

// ===================================================================

class Req_Login : public ::google::protobuf::Message {
 public:
  Req_Login();
  virtual ~Req_Login();

  Req_Login(const Req_Login& from);

  inline Req_Login& operator=(const Req_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_Login& default_instance();

  void Swap(Req_Login* other);

  // implements Message ----------------------------------------------

  Req_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_Login& from);
  void MergeFrom(const Req_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 expireTime = 2;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 2;
  inline ::google::protobuf::int32 expiretime() const;
  inline void set_expiretime(::google::protobuf::int32 value);

  // required string certStr = 3;
  inline bool has_certstr() const;
  inline void clear_certstr();
  static const int kCertStrFieldNumber = 3;
  inline const ::std::string& certstr() const;
  inline void set_certstr(const ::std::string& value);
  inline void set_certstr(const char* value);
  inline void set_certstr(const char* value, size_t size);
  inline ::std::string* mutable_certstr();
  inline ::std::string* release_certstr();
  inline void set_allocated_certstr(::std::string* certstr);

  // required bool isNewUser = 4;
  inline bool has_isnewuser() const;
  inline void clear_isnewuser();
  static const int kIsNewUserFieldNumber = 4;
  inline bool isnewuser() const;
  inline void set_isnewuser(bool value);

  // required string nickName = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string picUrl = 6;
  inline bool has_picurl() const;
  inline void clear_picurl();
  static const int kPicUrlFieldNumber = 6;
  inline const ::std::string& picurl() const;
  inline void set_picurl(const ::std::string& value);
  inline void set_picurl(const char* value);
  inline void set_picurl(const char* value, size_t size);
  inline ::std::string* mutable_picurl();
  inline ::std::string* release_picurl();
  inline void set_allocated_picurl(::std::string* picurl);

  // optional string pf = 7;
  inline bool has_pf() const;
  inline void clear_pf();
  static const int kPfFieldNumber = 7;
  inline const ::std::string& pf() const;
  inline void set_pf(const ::std::string& value);
  inline void set_pf(const char* value);
  inline void set_pf(const char* value, size_t size);
  inline ::std::string* mutable_pf();
  inline ::std::string* release_pf();
  inline void set_allocated_pf(::std::string* pf);

  // optional int32 sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required int32 gameID = 9;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 9;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_Login)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();
  inline void set_has_certstr();
  inline void clear_has_certstr();
  inline void set_has_isnewuser();
  inline void clear_has_isnewuser();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_picurl();
  inline void clear_has_picurl();
  inline void set_has_pf();
  inline void clear_has_pf();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 expiretime_;
  ::std::string* certstr_;
  ::std::string* nickname_;
  ::std::string* picurl_;
  bool isnewuser_;
  ::google::protobuf::int32 sex_;
  ::std::string* pf_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_Login* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_Login : public ::google::protobuf::Message {
 public:
  Ans_Pro_Login();
  virtual ~Ans_Pro_Login();

  Ans_Pro_Login(const Ans_Pro_Login& from);

  inline Ans_Pro_Login& operator=(const Ans_Pro_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_Login& default_instance();

  void Swap(Ans_Pro_Login* other);

  // implements Message ----------------------------------------------

  Ans_Pro_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_Login& from);
  void MergeFrom(const Ans_Pro_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pf.Ans_BaseInfo baseInfo = 1;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::pf::Ans_BaseInfo& baseinfo() const;
  inline ::pf::Ans_BaseInfo* mutable_baseinfo();
  inline ::pf::Ans_BaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::pf::Ans_BaseInfo* baseinfo);

  // required .pf.Ans_GameInfo gameInfo = 2;
  inline bool has_gameinfo() const;
  inline void clear_gameinfo();
  static const int kGameInfoFieldNumber = 2;
  inline const ::pf::Ans_GameInfo& gameinfo() const;
  inline ::pf::Ans_GameInfo* mutable_gameinfo();
  inline ::pf::Ans_GameInfo* release_gameinfo();
  inline void set_allocated_gameinfo(::pf::Ans_GameInfo* gameinfo);

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_Login)
 private:
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_gameinfo();
  inline void clear_has_gameinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pf::Ans_BaseInfo* baseinfo_;
  ::pf::Ans_GameInfo* gameinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_Login* default_instance_;
};
// -------------------------------------------------------------------

class Ans_BaseInfo : public ::google::protobuf::Message {
 public:
  Ans_BaseInfo();
  virtual ~Ans_BaseInfo();

  Ans_BaseInfo(const Ans_BaseInfo& from);

  inline Ans_BaseInfo& operator=(const Ans_BaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_BaseInfo& default_instance();

  void Swap(Ans_BaseInfo* other);

  // implements Message ----------------------------------------------

  Ans_BaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_BaseInfo& from);
  void MergeFrom(const Ans_BaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string picUrl = 3;
  inline bool has_picurl() const;
  inline void clear_picurl();
  static const int kPicUrlFieldNumber = 3;
  inline const ::std::string& picurl() const;
  inline void set_picurl(const ::std::string& value);
  inline void set_picurl(const char* value);
  inline void set_picurl(const char* value, size_t size);
  inline ::std::string* mutable_picurl();
  inline ::std::string* release_picurl();
  inline void set_allocated_picurl(::std::string* picurl);

  // required int32 loginNum = 4;
  inline bool has_loginnum() const;
  inline void clear_loginnum();
  static const int kLoginNumFieldNumber = 4;
  inline ::google::protobuf::int32 loginnum() const;
  inline void set_loginnum(::google::protobuf::int32 value);

  // required int32 loginIP = 5;
  inline bool has_loginip() const;
  inline void clear_loginip();
  static const int kLoginIPFieldNumber = 5;
  inline ::google::protobuf::int32 loginip() const;
  inline void set_loginip(::google::protobuf::int32 value);

  // required int32 lastLoginTime = 6;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 6;
  inline ::google::protobuf::int32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int32 value);

  // required int32 createTime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::int32 createtime() const;
  inline void set_createtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Ans_BaseInfo)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_picurl();
  inline void clear_has_picurl();
  inline void set_has_loginnum();
  inline void clear_has_loginnum();
  inline void set_has_loginip();
  inline void clear_has_loginip();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::std::string* picurl_;
  ::google::protobuf::int32 loginnum_;
  ::google::protobuf::int32 loginip_;
  ::google::protobuf::int32 lastlogintime_;
  ::google::protobuf::int32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_BaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class Ans_GameInfo : public ::google::protobuf::Message {
 public:
  Ans_GameInfo();
  virtual ~Ans_GameInfo();

  Ans_GameInfo(const Ans_GameInfo& from);

  inline Ans_GameInfo& operator=(const Ans_GameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_GameInfo& default_instance();

  void Swap(Ans_GameInfo* other);

  // implements Message ----------------------------------------------

  Ans_GameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_GameInfo& from);
  void MergeFrom(const Ans_GameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 coin = 1;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 1;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // required int32 points = 2;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // required int32 win = 3;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 3;
  inline ::google::protobuf::int32 win() const;
  inline void set_win(::google::protobuf::int32 value);

  // required int32 loss = 4;
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 4;
  inline ::google::protobuf::int32 loss() const;
  inline void set_loss(::google::protobuf::int32 value);

  // required int32 equal = 5;
  inline bool has_equal() const;
  inline void clear_equal();
  static const int kEqualFieldNumber = 5;
  inline ::google::protobuf::int32 equal() const;
  inline void set_equal(::google::protobuf::int32 value);

  // required int32 esc = 6;
  inline bool has_esc() const;
  inline void clear_esc();
  static const int kEscFieldNumber = 6;
  inline ::google::protobuf::int32 esc() const;
  inline void set_esc(::google::protobuf::int32 value);

  // required int32 org = 7;
  inline bool has_org() const;
  inline void clear_org();
  static const int kOrgFieldNumber = 7;
  inline ::google::protobuf::int32 org() const;
  inline void set_org(::google::protobuf::int32 value);

  // required int32 title = 8;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 8;
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);

  // required int32 orgState = 9;
  inline bool has_orgstate() const;
  inline void clear_orgstate();
  static const int kOrgStateFieldNumber = 9;
  inline ::google::protobuf::int32 orgstate() const;
  inline void set_orgstate(::google::protobuf::int32 value);

  // required int32 gameTime = 10;
  inline bool has_gametime() const;
  inline void clear_gametime();
  static const int kGameTimeFieldNumber = 10;
  inline ::google::protobuf::int32 gametime() const;
  inline void set_gametime(::google::protobuf::int32 value);

  // optional int32 gameBoxID = 11;
  inline bool has_gameboxid() const;
  inline void clear_gameboxid();
  static const int kGameBoxIDFieldNumber = 11;
  inline ::google::protobuf::int32 gameboxid() const;
  inline void set_gameboxid(::google::protobuf::int32 value);

  // optional int32 gameBoxExpire = 12;
  inline bool has_gameboxexpire() const;
  inline void clear_gameboxexpire();
  static const int kGameBoxExpireFieldNumber = 12;
  inline ::google::protobuf::int32 gameboxexpire() const;
  inline void set_gameboxexpire(::google::protobuf::int32 value);

  // optional int32 serverTime = 13;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 13;
  inline ::google::protobuf::int32 servertime() const;
  inline void set_servertime(::google::protobuf::int32 value);

  // optional int32 doneGuide = 14;
  inline bool has_doneguide() const;
  inline void clear_doneguide();
  static const int kDoneGuideFieldNumber = 14;
  inline ::google::protobuf::int32 doneguide() const;
  inline void set_doneguide(::google::protobuf::int32 value);

  // optional int32 achieveID = 15;
  inline bool has_achieveid() const;
  inline void clear_achieveid();
  static const int kAchieveIDFieldNumber = 15;
  inline ::google::protobuf::int32 achieveid() const;
  inline void set_achieveid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Ans_GameInfo)
 private:
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_equal();
  inline void clear_has_equal();
  inline void set_has_esc();
  inline void clear_has_esc();
  inline void set_has_org();
  inline void clear_has_org();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_orgstate();
  inline void clear_has_orgstate();
  inline void set_has_gametime();
  inline void clear_has_gametime();
  inline void set_has_gameboxid();
  inline void clear_has_gameboxid();
  inline void set_has_gameboxexpire();
  inline void clear_has_gameboxexpire();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_doneguide();
  inline void clear_has_doneguide();
  inline void set_has_achieveid();
  inline void clear_has_achieveid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 points_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 loss_;
  ::google::protobuf::int32 equal_;
  ::google::protobuf::int32 esc_;
  ::google::protobuf::int32 org_;
  ::google::protobuf::int32 title_;
  ::google::protobuf::int32 orgstate_;
  ::google::protobuf::int32 gametime_;
  ::google::protobuf::int32 gameboxid_;
  ::google::protobuf::int32 gameboxexpire_;
  ::google::protobuf::int32 servertime_;
  ::google::protobuf::int32 doneguide_;
  ::google::protobuf::int32 achieveid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_GameInfo* default_instance_;
};
// -------------------------------------------------------------------

class Req_EnterRoom : public ::google::protobuf::Message {
 public:
  Req_EnterRoom();
  virtual ~Req_EnterRoom();

  Req_EnterRoom(const Req_EnterRoom& from);

  inline Req_EnterRoom& operator=(const Req_EnterRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_EnterRoom& default_instance();

  void Swap(Req_EnterRoom* other);

  // implements Message ----------------------------------------------

  Req_EnterRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_EnterRoom& from);
  void MergeFrom(const Req_EnterRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_EnterRoom)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_EnterRoom* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_EnterRoom : public ::google::protobuf::Message {
 public:
  Ans_Pro_EnterRoom();
  virtual ~Ans_Pro_EnterRoom();

  Ans_Pro_EnterRoom(const Ans_Pro_EnterRoom& from);

  inline Ans_Pro_EnterRoom& operator=(const Ans_Pro_EnterRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_EnterRoom& default_instance();

  void Swap(Ans_Pro_EnterRoom* other);

  // implements Message ----------------------------------------------

  Ans_Pro_EnterRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_EnterRoom& from);
  void MergeFrom(const Ans_Pro_EnterRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_EnterRoom)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_EnterRoom* default_instance_;
};
// -------------------------------------------------------------------

class Req_LeaveRoom : public ::google::protobuf::Message {
 public:
  Req_LeaveRoom();
  virtual ~Req_LeaveRoom();

  Req_LeaveRoom(const Req_LeaveRoom& from);

  inline Req_LeaveRoom& operator=(const Req_LeaveRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_LeaveRoom& default_instance();

  void Swap(Req_LeaveRoom* other);

  // implements Message ----------------------------------------------

  Req_LeaveRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_LeaveRoom& from);
  void MergeFrom(const Req_LeaveRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_LeaveRoom)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_LeaveRoom* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_LeaveRoom : public ::google::protobuf::Message {
 public:
  Ans_Pro_LeaveRoom();
  virtual ~Ans_Pro_LeaveRoom();

  Ans_Pro_LeaveRoom(const Ans_Pro_LeaveRoom& from);

  inline Ans_Pro_LeaveRoom& operator=(const Ans_Pro_LeaveRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_LeaveRoom& default_instance();

  void Swap(Ans_Pro_LeaveRoom* other);

  // implements Message ----------------------------------------------

  Ans_Pro_LeaveRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_LeaveRoom& from);
  void MergeFrom(const Ans_Pro_LeaveRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_LeaveRoom)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_LeaveRoom* default_instance_;
};
// -------------------------------------------------------------------

class Req_GetTableList : public ::google::protobuf::Message {
 public:
  Req_GetTableList();
  virtual ~Req_GetTableList();

  Req_GetTableList(const Req_GetTableList& from);

  inline Req_GetTableList& operator=(const Req_GetTableList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_GetTableList& default_instance();

  void Swap(Req_GetTableList* other);

  // implements Message ----------------------------------------------

  Req_GetTableList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_GetTableList& from);
  void MergeFrom(const Req_GetTableList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_GetTableList)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_GetTableList* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_GetTableListInfo : public ::google::protobuf::Message {
 public:
  Ans_Pro_GetTableListInfo();
  virtual ~Ans_Pro_GetTableListInfo();

  Ans_Pro_GetTableListInfo(const Ans_Pro_GetTableListInfo& from);

  inline Ans_Pro_GetTableListInfo& operator=(const Ans_Pro_GetTableListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_GetTableListInfo& default_instance();

  void Swap(Ans_Pro_GetTableListInfo* other);

  // implements Message ----------------------------------------------

  Ans_Pro_GetTableListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_GetTableListInfo& from);
  void MergeFrom(const Ans_Pro_GetTableListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pf.Ans_SimpleTableInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::pf::Ans_SimpleTableInfo& infos(int index) const;
  inline ::pf::Ans_SimpleTableInfo* mutable_infos(int index);
  inline ::pf::Ans_SimpleTableInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleTableInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleTableInfo >*
      mutable_infos();

  // required int32 roomID = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_GetTableListInfo)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleTableInfo > infos_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_GetTableListInfo* default_instance_;
};
// -------------------------------------------------------------------

class Ans_SimpleTableInfo : public ::google::protobuf::Message {
 public:
  Ans_SimpleTableInfo();
  virtual ~Ans_SimpleTableInfo();

  Ans_SimpleTableInfo(const Ans_SimpleTableInfo& from);

  inline Ans_SimpleTableInfo& operator=(const Ans_SimpleTableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_SimpleTableInfo& default_instance();

  void Swap(Ans_SimpleTableInfo* other);

  // implements Message ----------------------------------------------

  Ans_SimpleTableInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_SimpleTableInfo& from);
  void MergeFrom(const Ans_SimpleTableInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableID = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 propID = 4;
  inline bool has_propid() const;
  inline void clear_propid();
  static const int kPropIDFieldNumber = 4;
  inline ::google::protobuf::int32 propid() const;
  inline void set_propid(::google::protobuf::int32 value);

  // required int32 playerNum = 5 [default = 0];
  inline bool has_playernum() const;
  inline void clear_playernum();
  static const int kPlayerNumFieldNumber = 5;
  inline ::google::protobuf::int32 playernum() const;
  inline void set_playernum(::google::protobuf::int32 value);

  // required int32 standNum = 6 [default = 0];
  inline bool has_standnum() const;
  inline void clear_standnum();
  static const int kStandNumFieldNumber = 6;
  inline ::google::protobuf::int32 standnum() const;
  inline void set_standnum(::google::protobuf::int32 value);

  // required int32 gameState = 7 [default = 0];
  inline bool has_gamestate() const;
  inline void clear_gamestate();
  static const int kGameStateFieldNumber = 7;
  inline ::google::protobuf::int32 gamestate() const;
  inline void set_gamestate(::google::protobuf::int32 value);

  // repeated .pf.Ans_SimpleSeatInfo infos = 8;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 8;
  inline const ::pf::Ans_SimpleSeatInfo& infos(int index) const;
  inline ::pf::Ans_SimpleSeatInfo* mutable_infos(int index);
  inline ::pf::Ans_SimpleSeatInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleSeatInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleSeatInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:pf.Ans_SimpleTableInfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_propid();
  inline void clear_has_propid();
  inline void set_has_playernum();
  inline void clear_has_playernum();
  inline void set_has_standnum();
  inline void clear_has_standnum();
  inline void set_has_gamestate();
  inline void clear_has_gamestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 propid_;
  ::google::protobuf::int32 playernum_;
  ::google::protobuf::int32 standnum_;
  ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleSeatInfo > infos_;
  ::google::protobuf::int32 gamestate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_SimpleTableInfo* default_instance_;
};
// -------------------------------------------------------------------

class Ans_SimpleSeatInfo : public ::google::protobuf::Message {
 public:
  Ans_SimpleSeatInfo();
  virtual ~Ans_SimpleSeatInfo();

  Ans_SimpleSeatInfo(const Ans_SimpleSeatInfo& from);

  inline Ans_SimpleSeatInfo& operator=(const Ans_SimpleSeatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_SimpleSeatInfo& default_instance();

  void Swap(Ans_SimpleSeatInfo* other);

  // implements Message ----------------------------------------------

  Ans_SimpleSeatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_SimpleSeatInfo& from);
  void MergeFrom(const Ans_SimpleSeatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 readyState = 2 [default = 0];
  inline bool has_readystate() const;
  inline void clear_readystate();
  static const int kReadyStateFieldNumber = 2;
  inline ::google::protobuf::int32 readystate() const;
  inline void set_readystate(::google::protobuf::int32 value);

  // required string nickName = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string picUrl = 4;
  inline bool has_picurl() const;
  inline void clear_picurl();
  static const int kPicUrlFieldNumber = 4;
  inline const ::std::string& picurl() const;
  inline void set_picurl(const ::std::string& value);
  inline void set_picurl(const char* value);
  inline void set_picurl(const char* value, size_t size);
  inline ::std::string* mutable_picurl();
  inline ::std::string* release_picurl();
  inline void set_allocated_picurl(::std::string* picurl);

  // required int32 seatID = 5;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 5;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Ans_SimpleSeatInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_readystate();
  inline void clear_has_readystate();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_picurl();
  inline void clear_has_picurl();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 readystate_;
  ::std::string* nickname_;
  ::std::string* picurl_;
  ::google::protobuf::int32 seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_SimpleSeatInfo* default_instance_;
};
// -------------------------------------------------------------------

class Req_EnterTable : public ::google::protobuf::Message {
 public:
  Req_EnterTable();
  virtual ~Req_EnterTable();

  Req_EnterTable(const Req_EnterTable& from);

  inline Req_EnterTable& operator=(const Req_EnterTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_EnterTable& default_instance();

  void Swap(Req_EnterTable* other);

  // implements Message ----------------------------------------------

  Req_EnterTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_EnterTable& from);
  void MergeFrom(const Req_EnterTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 tableID = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 seatID = 3 [default = 0];
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 3;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 intent = 4 [default = 0];
  inline bool has_intent() const;
  inline void clear_intent();
  static const int kIntentFieldNumber = 4;
  inline ::google::protobuf::int32 intent() const;
  inline void set_intent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_EnterTable)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_intent();
  inline void clear_has_intent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 intent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_EnterTable* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_OnEnterTable : public ::google::protobuf::Message {
 public:
  Ans_Pro_OnEnterTable();
  virtual ~Ans_Pro_OnEnterTable();

  Ans_Pro_OnEnterTable(const Ans_Pro_OnEnterTable& from);

  inline Ans_Pro_OnEnterTable& operator=(const Ans_Pro_OnEnterTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_OnEnterTable& default_instance();

  void Swap(Ans_Pro_OnEnterTable* other);

  // implements Message ----------------------------------------------

  Ans_Pro_OnEnterTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_OnEnterTable& from);
  void MergeFrom(const Ans_Pro_OnEnterTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 3;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 tableID = 4;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 4;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // repeated .pf.Ans_TablePlayerInfo players = 7;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 7;
  inline const ::pf::Ans_TablePlayerInfo& players(int index) const;
  inline ::pf::Ans_TablePlayerInfo* mutable_players(int index);
  inline ::pf::Ans_TablePlayerInfo* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::pf::Ans_TablePlayerInfo >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::pf::Ans_TablePlayerInfo >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_OnEnterTable)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::RepeatedPtrField< ::pf::Ans_TablePlayerInfo > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_OnEnterTable* default_instance_;
};
// -------------------------------------------------------------------

class Ans_TablePlayerInfo : public ::google::protobuf::Message {
 public:
  Ans_TablePlayerInfo();
  virtual ~Ans_TablePlayerInfo();

  Ans_TablePlayerInfo(const Ans_TablePlayerInfo& from);

  inline Ans_TablePlayerInfo& operator=(const Ans_TablePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_TablePlayerInfo& default_instance();

  void Swap(Ans_TablePlayerInfo* other);

  // implements Message ----------------------------------------------

  Ans_TablePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_TablePlayerInfo& from);
  void MergeFrom(const Ans_TablePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seatID = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 userID = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string nickName = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string headUrl = 4;
  inline bool has_headurl() const;
  inline void clear_headurl();
  static const int kHeadUrlFieldNumber = 4;
  inline const ::std::string& headurl() const;
  inline void set_headurl(const ::std::string& value);
  inline void set_headurl(const char* value);
  inline void set_headurl(const char* value, size_t size);
  inline ::std::string* mutable_headurl();
  inline ::std::string* release_headurl();
  inline void set_allocated_headurl(::std::string* headurl);

  // optional int32 isAdmin = 5 [default = 0];
  inline bool has_isadmin() const;
  inline void clear_isadmin();
  static const int kIsAdminFieldNumber = 5;
  inline ::google::protobuf::int32 isadmin() const;
  inline void set_isadmin(::google::protobuf::int32 value);

  // optional int32 win = 6 [default = 0];
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 6;
  inline ::google::protobuf::int32 win() const;
  inline void set_win(::google::protobuf::int32 value);

  // optional int32 loss = 7 [default = 0];
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 7;
  inline ::google::protobuf::int32 loss() const;
  inline void set_loss(::google::protobuf::int32 value);

  // optional int32 equal = 8 [default = 0];
  inline bool has_equal() const;
  inline void clear_equal();
  static const int kEqualFieldNumber = 8;
  inline ::google::protobuf::int32 equal() const;
  inline void set_equal(::google::protobuf::int32 value);

  // optional int32 esc = 9 [default = 0];
  inline bool has_esc() const;
  inline void clear_esc();
  static const int kEscFieldNumber = 9;
  inline ::google::protobuf::int32 esc() const;
  inline void set_esc(::google::protobuf::int32 value);

  // optional int32 coin = 10 [default = 0];
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 10;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // optional int32 points = 11 [default = 0];
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 11;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // optional int32 sex = 12 [default = 0];
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 12;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 achieveID = 13;
  inline bool has_achieveid() const;
  inline void clear_achieveid();
  static const int kAchieveIDFieldNumber = 13;
  inline ::google::protobuf::int32 achieveid() const;
  inline void set_achieveid(::google::protobuf::int32 value);

  // optional int32 gameBoxID = 14;
  inline bool has_gameboxid() const;
  inline void clear_gameboxid();
  static const int kGameBoxIDFieldNumber = 14;
  inline ::google::protobuf::int32 gameboxid() const;
  inline void set_gameboxid(::google::protobuf::int32 value);

  // optional int32 isLooker = 15;
  inline bool has_islooker() const;
  inline void clear_islooker();
  static const int kIsLookerFieldNumber = 15;
  inline ::google::protobuf::int32 islooker() const;
  inline void set_islooker(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Ans_TablePlayerInfo)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_headurl();
  inline void clear_has_headurl();
  inline void set_has_isadmin();
  inline void clear_has_isadmin();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_equal();
  inline void clear_has_equal();
  inline void set_has_esc();
  inline void clear_has_esc();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_achieveid();
  inline void clear_has_achieveid();
  inline void set_has_gameboxid();
  inline void clear_has_gameboxid();
  inline void set_has_islooker();
  inline void clear_has_islooker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 userid_;
  ::std::string* nickname_;
  ::std::string* headurl_;
  ::google::protobuf::int32 isadmin_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 loss_;
  ::google::protobuf::int32 equal_;
  ::google::protobuf::int32 esc_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 points_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 achieveid_;
  ::google::protobuf::int32 gameboxid_;
  ::google::protobuf::int32 islooker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_TablePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_AddTablePlayer : public ::google::protobuf::Message {
 public:
  Ans_Pro_AddTablePlayer();
  virtual ~Ans_Pro_AddTablePlayer();

  Ans_Pro_AddTablePlayer(const Ans_Pro_AddTablePlayer& from);

  inline Ans_Pro_AddTablePlayer& operator=(const Ans_Pro_AddTablePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_AddTablePlayer& default_instance();

  void Swap(Ans_Pro_AddTablePlayer* other);

  // implements Message ----------------------------------------------

  Ans_Pro_AddTablePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_AddTablePlayer& from);
  void MergeFrom(const Ans_Pro_AddTablePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pf.Ans_TablePlayerInfo players = 1;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::pf::Ans_TablePlayerInfo& players() const;
  inline ::pf::Ans_TablePlayerInfo* mutable_players();
  inline ::pf::Ans_TablePlayerInfo* release_players();
  inline void set_allocated_players(::pf::Ans_TablePlayerInfo* players);

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_AddTablePlayer)
 private:
  inline void set_has_players();
  inline void clear_has_players();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pf::Ans_TablePlayerInfo* players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_AddTablePlayer* default_instance_;
};
// -------------------------------------------------------------------

class Req_SitDown : public ::google::protobuf::Message {
 public:
  Req_SitDown();
  virtual ~Req_SitDown();

  Req_SitDown(const Req_SitDown& from);

  inline Req_SitDown& operator=(const Req_SitDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_SitDown& default_instance();

  void Swap(Req_SitDown* other);

  // implements Message ----------------------------------------------

  Req_SitDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_SitDown& from);
  void MergeFrom(const Req_SitDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 seatID = 3;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 3;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_SitDown)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_SitDown* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_NotifySitDown : public ::google::protobuf::Message {
 public:
  Ans_Pro_NotifySitDown();
  virtual ~Ans_Pro_NotifySitDown();

  Ans_Pro_NotifySitDown(const Ans_Pro_NotifySitDown& from);

  inline Ans_Pro_NotifySitDown& operator=(const Ans_Pro_NotifySitDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_NotifySitDown& default_instance();

  void Swap(Ans_Pro_NotifySitDown* other);

  // implements Message ----------------------------------------------

  Ans_Pro_NotifySitDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_NotifySitDown& from);
  void MergeFrom(const Ans_Pro_NotifySitDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 seatID = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_NotifySitDown)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_NotifySitDown* default_instance_;
};
// -------------------------------------------------------------------

class Req_ReadyGame : public ::google::protobuf::Message {
 public:
  Req_ReadyGame();
  virtual ~Req_ReadyGame();

  Req_ReadyGame(const Req_ReadyGame& from);

  inline Req_ReadyGame& operator=(const Req_ReadyGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_ReadyGame& default_instance();

  void Swap(Req_ReadyGame* other);

  // implements Message ----------------------------------------------

  Req_ReadyGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_ReadyGame& from);
  void MergeFrom(const Req_ReadyGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_ReadyGame)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_ReadyGame* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_ReadyGame : public ::google::protobuf::Message {
 public:
  Ans_Pro_ReadyGame();
  virtual ~Ans_Pro_ReadyGame();

  Ans_Pro_ReadyGame(const Ans_Pro_ReadyGame& from);

  inline Ans_Pro_ReadyGame& operator=(const Ans_Pro_ReadyGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_ReadyGame& default_instance();

  void Swap(Ans_Pro_ReadyGame* other);

  // implements Message ----------------------------------------------

  Ans_Pro_ReadyGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_ReadyGame& from);
  void MergeFrom(const Ans_Pro_ReadyGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_ReadyGame)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_ReadyGame* default_instance_;
};
// -------------------------------------------------------------------

class Req_StandUp : public ::google::protobuf::Message {
 public:
  Req_StandUp();
  virtual ~Req_StandUp();

  Req_StandUp(const Req_StandUp& from);

  inline Req_StandUp& operator=(const Req_StandUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_StandUp& default_instance();

  void Swap(Req_StandUp* other);

  // implements Message ----------------------------------------------

  Req_StandUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_StandUp& from);
  void MergeFrom(const Req_StandUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_StandUp)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_StandUp* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_NotifyStandUp : public ::google::protobuf::Message {
 public:
  Ans_Pro_NotifyStandUp();
  virtual ~Ans_Pro_NotifyStandUp();

  Ans_Pro_NotifyStandUp(const Ans_Pro_NotifyStandUp& from);

  inline Ans_Pro_NotifyStandUp& operator=(const Ans_Pro_NotifyStandUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_NotifyStandUp& default_instance();

  void Swap(Ans_Pro_NotifyStandUp* other);

  // implements Message ----------------------------------------------

  Ans_Pro_NotifyStandUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_NotifyStandUp& from);
  void MergeFrom(const Ans_Pro_NotifyStandUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_NotifyStandUp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_NotifyStandUp* default_instance_;
};
// -------------------------------------------------------------------

class Req_LeaveTable : public ::google::protobuf::Message {
 public:
  Req_LeaveTable();
  virtual ~Req_LeaveTable();

  Req_LeaveTable(const Req_LeaveTable& from);

  inline Req_LeaveTable& operator=(const Req_LeaveTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_LeaveTable& default_instance();

  void Swap(Req_LeaveTable* other);

  // implements Message ----------------------------------------------

  Req_LeaveTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_LeaveTable& from);
  void MergeFrom(const Req_LeaveTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Req_LeaveTable)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_LeaveTable* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_LeaveTable : public ::google::protobuf::Message {
 public:
  Ans_Pro_LeaveTable();
  virtual ~Ans_Pro_LeaveTable();

  Ans_Pro_LeaveTable(const Ans_Pro_LeaveTable& from);

  inline Ans_Pro_LeaveTable& operator=(const Ans_Pro_LeaveTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_LeaveTable& default_instance();

  void Swap(Ans_Pro_LeaveTable* other);

  // implements Message ----------------------------------------------

  Ans_Pro_LeaveTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_LeaveTable& from);
  void MergeFrom(const Ans_Pro_LeaveTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_LeaveTable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_LeaveTable* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_DelTablePlayer : public ::google::protobuf::Message {
 public:
  Ans_Pro_DelTablePlayer();
  virtual ~Ans_Pro_DelTablePlayer();

  Ans_Pro_DelTablePlayer(const Ans_Pro_DelTablePlayer& from);

  inline Ans_Pro_DelTablePlayer& operator=(const Ans_Pro_DelTablePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_DelTablePlayer& default_instance();

  void Swap(Ans_Pro_DelTablePlayer* other);

  // implements Message ----------------------------------------------

  Ans_Pro_DelTablePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_DelTablePlayer& from);
  void MergeFrom(const Ans_Pro_DelTablePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_DelTablePlayer)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_DelTablePlayer* default_instance_;
};
// -------------------------------------------------------------------

class Pro_GameMsg : public ::google::protobuf::Message {
 public:
  Pro_GameMsg();
  virtual ~Pro_GameMsg();

  Pro_GameMsg(const Pro_GameMsg& from);

  inline Pro_GameMsg& operator=(const Pro_GameMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pro_GameMsg& default_instance();

  void Swap(Pro_GameMsg* other);

  // implements Message ----------------------------------------------

  Pro_GameMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pro_GameMsg& from);
  void MergeFrom(const Pro_GameMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableID = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 gameCmdID = 3;
  inline bool has_gamecmdid() const;
  inline void clear_gamecmdid();
  static const int kGameCmdIDFieldNumber = 3;
  inline ::google::protobuf::int32 gamecmdid() const;
  inline void set_gamecmdid(::google::protobuf::int32 value);

  // optional bytes paramBytes = 4;
  inline bool has_parambytes() const;
  inline void clear_parambytes();
  static const int kParamBytesFieldNumber = 4;
  inline const ::std::string& parambytes() const;
  inline void set_parambytes(const ::std::string& value);
  inline void set_parambytes(const char* value);
  inline void set_parambytes(const void* value, size_t size);
  inline ::std::string* mutable_parambytes();
  inline ::std::string* release_parambytes();
  inline void set_allocated_parambytes(::std::string* parambytes);

  // @@protoc_insertion_point(class_scope:pf.Pro_GameMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_gamecmdid();
  inline void clear_has_gamecmdid();
  inline void set_has_parambytes();
  inline void clear_has_parambytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableid_;
  ::std::string* parambytes_;
  ::google::protobuf::int32 gamecmdid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Pro_GameMsg* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Pro_TablePlayerInfoChange : public ::google::protobuf::Message {
 public:
  Ans_Pro_TablePlayerInfoChange();
  virtual ~Ans_Pro_TablePlayerInfoChange();

  Ans_Pro_TablePlayerInfoChange(const Ans_Pro_TablePlayerInfoChange& from);

  inline Ans_Pro_TablePlayerInfoChange& operator=(const Ans_Pro_TablePlayerInfoChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Pro_TablePlayerInfoChange& default_instance();

  void Swap(Ans_Pro_TablePlayerInfoChange* other);

  // implements Message ----------------------------------------------

  Ans_Pro_TablePlayerInfoChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Pro_TablePlayerInfoChange& from);
  void MergeFrom(const Ans_Pro_TablePlayerInfoChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required .pf.Ans_TablePlayerInfo infos = 2;
  inline bool has_infos() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::pf::Ans_TablePlayerInfo& infos() const;
  inline ::pf::Ans_TablePlayerInfo* mutable_infos();
  inline ::pf::Ans_TablePlayerInfo* release_infos();
  inline void set_allocated_infos(::pf::Ans_TablePlayerInfo* infos);

  // @@protoc_insertion_point(class_scope:pf.Ans_Pro_TablePlayerInfoChange)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_infos();
  inline void clear_has_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pf::Ans_TablePlayerInfo* infos_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Pro_TablePlayerInfoChange* default_instance_;
};
// -------------------------------------------------------------------

class ErrorMes : public ::google::protobuf::Message {
 public:
  ErrorMes();
  virtual ~ErrorMes();

  ErrorMes(const ErrorMes& from);

  inline ErrorMes& operator=(const ErrorMes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorMes& default_instance();

  void Swap(ErrorMes* other);

  // implements Message ----------------------------------------------

  ErrorMes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorMes& from);
  void MergeFrom(const ErrorMes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // required string errorMsg = 2;
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 2;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  inline void set_allocated_errormsg(::std::string* errormsg);

  // @@protoc_insertion_point(class_scope:pf.ErrorMes)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* errormsg_;
  ::google::protobuf::int32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static ErrorMes* default_instance_;
};
// -------------------------------------------------------------------

class Req_Test : public ::google::protobuf::Message {
 public:
  Req_Test();
  virtual ~Req_Test();

  Req_Test(const Req_Test& from);

  inline Req_Test& operator=(const Req_Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req_Test& default_instance();

  void Swap(Req_Test* other);

  // implements Message ----------------------------------------------

  Req_Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req_Test& from);
  void MergeFrom(const Req_Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // required string name = 2 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes buf = 3;
  inline bool has_buf() const;
  inline void clear_buf();
  static const int kBufFieldNumber = 3;
  inline const ::std::string& buf() const;
  inline void set_buf(const ::std::string& value);
  inline void set_buf(const char* value);
  inline void set_buf(const void* value, size_t size);
  inline ::std::string* mutable_buf();
  inline ::std::string* release_buf();
  inline void set_allocated_buf(::std::string* buf);

  // @@protoc_insertion_point(class_scope:pf.Req_Test)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_buf();
  inline void clear_has_buf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* buf_;
  ::google::protobuf::int32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Req_Test* default_instance_;
};
// -------------------------------------------------------------------

class Ans_Test : public ::google::protobuf::Message {
 public:
  Ans_Test();
  virtual ~Ans_Test();

  Ans_Test(const Ans_Test& from);

  inline Ans_Test& operator=(const Ans_Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ans_Test& default_instance();

  void Swap(Ans_Test* other);

  // implements Message ----------------------------------------------

  Ans_Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ans_Test& from);
  void MergeFrom(const Ans_Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional bytes buf = 2;
  inline bool has_buf() const;
  inline void clear_buf();
  static const int kBufFieldNumber = 2;
  inline const ::std::string& buf() const;
  inline void set_buf(const ::std::string& value);
  inline void set_buf(const char* value);
  inline void set_buf(const void* value, size_t size);
  inline ::std::string* mutable_buf();
  inline ::std::string* release_buf();
  inline void set_allocated_buf(::std::string* buf);

  // required string name = 3 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pf.Ans_Test)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_buf();
  inline void clear_has_buf();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* buf_;
  ::std::string* name_;
  ::google::protobuf::int32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pf_2eproto();
  friend void protobuf_AssignDesc_pf_2eproto();
  friend void protobuf_ShutdownFile_pf_2eproto();

  void InitAsDefaultInstance();
  static Ans_Test* default_instance_;
};
// ===================================================================


// ===================================================================

// Req_Login

// required int32 userID = 1;
inline bool Req_Login::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_Login::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_Login::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_Login::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Req_Login::userid() const {
  return userid_;
}
inline void Req_Login::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 expireTime = 2;
inline bool Req_Login::has_expiretime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Req_Login::set_has_expiretime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Req_Login::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Req_Login::clear_expiretime() {
  expiretime_ = 0;
  clear_has_expiretime();
}
inline ::google::protobuf::int32 Req_Login::expiretime() const {
  return expiretime_;
}
inline void Req_Login::set_expiretime(::google::protobuf::int32 value) {
  set_has_expiretime();
  expiretime_ = value;
}

// required string certStr = 3;
inline bool Req_Login::has_certstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Req_Login::set_has_certstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Req_Login::clear_has_certstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Req_Login::clear_certstr() {
  if (certstr_ != &::google::protobuf::internal::kEmptyString) {
    certstr_->clear();
  }
  clear_has_certstr();
}
inline const ::std::string& Req_Login::certstr() const {
  return *certstr_;
}
inline void Req_Login::set_certstr(const ::std::string& value) {
  set_has_certstr();
  if (certstr_ == &::google::protobuf::internal::kEmptyString) {
    certstr_ = new ::std::string;
  }
  certstr_->assign(value);
}
inline void Req_Login::set_certstr(const char* value) {
  set_has_certstr();
  if (certstr_ == &::google::protobuf::internal::kEmptyString) {
    certstr_ = new ::std::string;
  }
  certstr_->assign(value);
}
inline void Req_Login::set_certstr(const char* value, size_t size) {
  set_has_certstr();
  if (certstr_ == &::google::protobuf::internal::kEmptyString) {
    certstr_ = new ::std::string;
  }
  certstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Req_Login::mutable_certstr() {
  set_has_certstr();
  if (certstr_ == &::google::protobuf::internal::kEmptyString) {
    certstr_ = new ::std::string;
  }
  return certstr_;
}
inline ::std::string* Req_Login::release_certstr() {
  clear_has_certstr();
  if (certstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = certstr_;
    certstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Req_Login::set_allocated_certstr(::std::string* certstr) {
  if (certstr_ != &::google::protobuf::internal::kEmptyString) {
    delete certstr_;
  }
  if (certstr) {
    set_has_certstr();
    certstr_ = certstr;
  } else {
    clear_has_certstr();
    certstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool isNewUser = 4;
inline bool Req_Login::has_isnewuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Req_Login::set_has_isnewuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Req_Login::clear_has_isnewuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Req_Login::clear_isnewuser() {
  isnewuser_ = false;
  clear_has_isnewuser();
}
inline bool Req_Login::isnewuser() const {
  return isnewuser_;
}
inline void Req_Login::set_isnewuser(bool value) {
  set_has_isnewuser();
  isnewuser_ = value;
}

// required string nickName = 5;
inline bool Req_Login::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Req_Login::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Req_Login::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Req_Login::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Req_Login::nickname() const {
  return *nickname_;
}
inline void Req_Login::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Req_Login::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Req_Login::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Req_Login::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Req_Login::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Req_Login::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string picUrl = 6;
inline bool Req_Login::has_picurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Req_Login::set_has_picurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Req_Login::clear_has_picurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Req_Login::clear_picurl() {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    picurl_->clear();
  }
  clear_has_picurl();
}
inline const ::std::string& Req_Login::picurl() const {
  return *picurl_;
}
inline void Req_Login::set_picurl(const ::std::string& value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Req_Login::set_picurl(const char* value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Req_Login::set_picurl(const char* value, size_t size) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Req_Login::mutable_picurl() {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  return picurl_;
}
inline ::std::string* Req_Login::release_picurl() {
  clear_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picurl_;
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Req_Login::set_allocated_picurl(::std::string* picurl) {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (picurl) {
    set_has_picurl();
    picurl_ = picurl;
  } else {
    clear_has_picurl();
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pf = 7;
inline bool Req_Login::has_pf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Req_Login::set_has_pf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Req_Login::clear_has_pf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Req_Login::clear_pf() {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    pf_->clear();
  }
  clear_has_pf();
}
inline const ::std::string& Req_Login::pf() const {
  return *pf_;
}
inline void Req_Login::set_pf(const ::std::string& value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void Req_Login::set_pf(const char* value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void Req_Login::set_pf(const char* value, size_t size) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Req_Login::mutable_pf() {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  return pf_;
}
inline ::std::string* Req_Login::release_pf() {
  clear_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pf_;
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Req_Login::set_allocated_pf(::std::string* pf) {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (pf) {
    set_has_pf();
    pf_ = pf;
  } else {
    clear_has_pf();
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 8;
inline bool Req_Login::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Req_Login::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Req_Login::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Req_Login::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 Req_Login::sex() const {
  return sex_;
}
inline void Req_Login::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required int32 gameID = 9;
inline bool Req_Login::has_gameid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Req_Login::set_has_gameid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Req_Login::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Req_Login::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 Req_Login::gameid() const {
  return gameid_;
}
inline void Req_Login::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_Login

// required .pf.Ans_BaseInfo baseInfo = 1;
inline bool Ans_Pro_Login::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_Pro_Login::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_Pro_Login::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_Pro_Login::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::pf::Ans_BaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::pf::Ans_BaseInfo& Ans_Pro_Login::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::pf::Ans_BaseInfo* Ans_Pro_Login::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::pf::Ans_BaseInfo;
  return baseinfo_;
}
inline ::pf::Ans_BaseInfo* Ans_Pro_Login::release_baseinfo() {
  clear_has_baseinfo();
  ::pf::Ans_BaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void Ans_Pro_Login::set_allocated_baseinfo(::pf::Ans_BaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// required .pf.Ans_GameInfo gameInfo = 2;
inline bool Ans_Pro_Login::has_gameinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_Pro_Login::set_has_gameinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_Pro_Login::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_Pro_Login::clear_gameinfo() {
  if (gameinfo_ != NULL) gameinfo_->::pf::Ans_GameInfo::Clear();
  clear_has_gameinfo();
}
inline const ::pf::Ans_GameInfo& Ans_Pro_Login::gameinfo() const {
  return gameinfo_ != NULL ? *gameinfo_ : *default_instance_->gameinfo_;
}
inline ::pf::Ans_GameInfo* Ans_Pro_Login::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) gameinfo_ = new ::pf::Ans_GameInfo;
  return gameinfo_;
}
inline ::pf::Ans_GameInfo* Ans_Pro_Login::release_gameinfo() {
  clear_has_gameinfo();
  ::pf::Ans_GameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
inline void Ans_Pro_Login::set_allocated_gameinfo(::pf::Ans_GameInfo* gameinfo) {
  delete gameinfo_;
  gameinfo_ = gameinfo;
  if (gameinfo) {
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
}

// -------------------------------------------------------------------

// Ans_BaseInfo

// required string nickName = 2;
inline bool Ans_BaseInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_BaseInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_BaseInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_BaseInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Ans_BaseInfo::nickname() const {
  return *nickname_;
}
inline void Ans_BaseInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Ans_BaseInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Ans_BaseInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ans_BaseInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Ans_BaseInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ans_BaseInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string picUrl = 3;
inline bool Ans_BaseInfo::has_picurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_BaseInfo::set_has_picurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_BaseInfo::clear_has_picurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_BaseInfo::clear_picurl() {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    picurl_->clear();
  }
  clear_has_picurl();
}
inline const ::std::string& Ans_BaseInfo::picurl() const {
  return *picurl_;
}
inline void Ans_BaseInfo::set_picurl(const ::std::string& value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Ans_BaseInfo::set_picurl(const char* value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Ans_BaseInfo::set_picurl(const char* value, size_t size) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ans_BaseInfo::mutable_picurl() {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  return picurl_;
}
inline ::std::string* Ans_BaseInfo::release_picurl() {
  clear_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picurl_;
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ans_BaseInfo::set_allocated_picurl(::std::string* picurl) {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (picurl) {
    set_has_picurl();
    picurl_ = picurl;
  } else {
    clear_has_picurl();
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 loginNum = 4;
inline bool Ans_BaseInfo::has_loginnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ans_BaseInfo::set_has_loginnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ans_BaseInfo::clear_has_loginnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ans_BaseInfo::clear_loginnum() {
  loginnum_ = 0;
  clear_has_loginnum();
}
inline ::google::protobuf::int32 Ans_BaseInfo::loginnum() const {
  return loginnum_;
}
inline void Ans_BaseInfo::set_loginnum(::google::protobuf::int32 value) {
  set_has_loginnum();
  loginnum_ = value;
}

// required int32 loginIP = 5;
inline bool Ans_BaseInfo::has_loginip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ans_BaseInfo::set_has_loginip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ans_BaseInfo::clear_has_loginip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ans_BaseInfo::clear_loginip() {
  loginip_ = 0;
  clear_has_loginip();
}
inline ::google::protobuf::int32 Ans_BaseInfo::loginip() const {
  return loginip_;
}
inline void Ans_BaseInfo::set_loginip(::google::protobuf::int32 value) {
  set_has_loginip();
  loginip_ = value;
}

// required int32 lastLoginTime = 6;
inline bool Ans_BaseInfo::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ans_BaseInfo::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ans_BaseInfo::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ans_BaseInfo::clear_lastlogintime() {
  lastlogintime_ = 0;
  clear_has_lastlogintime();
}
inline ::google::protobuf::int32 Ans_BaseInfo::lastlogintime() const {
  return lastlogintime_;
}
inline void Ans_BaseInfo::set_lastlogintime(::google::protobuf::int32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// required int32 createTime = 7;
inline bool Ans_BaseInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ans_BaseInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ans_BaseInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ans_BaseInfo::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 Ans_BaseInfo::createtime() const {
  return createtime_;
}
inline void Ans_BaseInfo::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// Ans_GameInfo

// required int32 coin = 1;
inline bool Ans_GameInfo::has_coin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_GameInfo::set_has_coin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_GameInfo::clear_has_coin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_GameInfo::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 Ans_GameInfo::coin() const {
  return coin_;
}
inline void Ans_GameInfo::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// required int32 points = 2;
inline bool Ans_GameInfo::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_GameInfo::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_GameInfo::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_GameInfo::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 Ans_GameInfo::points() const {
  return points_;
}
inline void Ans_GameInfo::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
}

// required int32 win = 3;
inline bool Ans_GameInfo::has_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ans_GameInfo::set_has_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ans_GameInfo::clear_has_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ans_GameInfo::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 Ans_GameInfo::win() const {
  return win_;
}
inline void Ans_GameInfo::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
}

// required int32 loss = 4;
inline bool Ans_GameInfo::has_loss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ans_GameInfo::set_has_loss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ans_GameInfo::clear_has_loss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ans_GameInfo::clear_loss() {
  loss_ = 0;
  clear_has_loss();
}
inline ::google::protobuf::int32 Ans_GameInfo::loss() const {
  return loss_;
}
inline void Ans_GameInfo::set_loss(::google::protobuf::int32 value) {
  set_has_loss();
  loss_ = value;
}

// required int32 equal = 5;
inline bool Ans_GameInfo::has_equal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ans_GameInfo::set_has_equal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ans_GameInfo::clear_has_equal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ans_GameInfo::clear_equal() {
  equal_ = 0;
  clear_has_equal();
}
inline ::google::protobuf::int32 Ans_GameInfo::equal() const {
  return equal_;
}
inline void Ans_GameInfo::set_equal(::google::protobuf::int32 value) {
  set_has_equal();
  equal_ = value;
}

// required int32 esc = 6;
inline bool Ans_GameInfo::has_esc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ans_GameInfo::set_has_esc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ans_GameInfo::clear_has_esc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ans_GameInfo::clear_esc() {
  esc_ = 0;
  clear_has_esc();
}
inline ::google::protobuf::int32 Ans_GameInfo::esc() const {
  return esc_;
}
inline void Ans_GameInfo::set_esc(::google::protobuf::int32 value) {
  set_has_esc();
  esc_ = value;
}

// required int32 org = 7;
inline bool Ans_GameInfo::has_org() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ans_GameInfo::set_has_org() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ans_GameInfo::clear_has_org() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ans_GameInfo::clear_org() {
  org_ = 0;
  clear_has_org();
}
inline ::google::protobuf::int32 Ans_GameInfo::org() const {
  return org_;
}
inline void Ans_GameInfo::set_org(::google::protobuf::int32 value) {
  set_has_org();
  org_ = value;
}

// required int32 title = 8;
inline bool Ans_GameInfo::has_title() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ans_GameInfo::set_has_title() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ans_GameInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ans_GameInfo::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 Ans_GameInfo::title() const {
  return title_;
}
inline void Ans_GameInfo::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
}

// required int32 orgState = 9;
inline bool Ans_GameInfo::has_orgstate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ans_GameInfo::set_has_orgstate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ans_GameInfo::clear_has_orgstate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ans_GameInfo::clear_orgstate() {
  orgstate_ = 0;
  clear_has_orgstate();
}
inline ::google::protobuf::int32 Ans_GameInfo::orgstate() const {
  return orgstate_;
}
inline void Ans_GameInfo::set_orgstate(::google::protobuf::int32 value) {
  set_has_orgstate();
  orgstate_ = value;
}

// required int32 gameTime = 10;
inline bool Ans_GameInfo::has_gametime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ans_GameInfo::set_has_gametime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ans_GameInfo::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ans_GameInfo::clear_gametime() {
  gametime_ = 0;
  clear_has_gametime();
}
inline ::google::protobuf::int32 Ans_GameInfo::gametime() const {
  return gametime_;
}
inline void Ans_GameInfo::set_gametime(::google::protobuf::int32 value) {
  set_has_gametime();
  gametime_ = value;
}

// optional int32 gameBoxID = 11;
inline bool Ans_GameInfo::has_gameboxid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ans_GameInfo::set_has_gameboxid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ans_GameInfo::clear_has_gameboxid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ans_GameInfo::clear_gameboxid() {
  gameboxid_ = 0;
  clear_has_gameboxid();
}
inline ::google::protobuf::int32 Ans_GameInfo::gameboxid() const {
  return gameboxid_;
}
inline void Ans_GameInfo::set_gameboxid(::google::protobuf::int32 value) {
  set_has_gameboxid();
  gameboxid_ = value;
}

// optional int32 gameBoxExpire = 12;
inline bool Ans_GameInfo::has_gameboxexpire() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ans_GameInfo::set_has_gameboxexpire() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ans_GameInfo::clear_has_gameboxexpire() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ans_GameInfo::clear_gameboxexpire() {
  gameboxexpire_ = 0;
  clear_has_gameboxexpire();
}
inline ::google::protobuf::int32 Ans_GameInfo::gameboxexpire() const {
  return gameboxexpire_;
}
inline void Ans_GameInfo::set_gameboxexpire(::google::protobuf::int32 value) {
  set_has_gameboxexpire();
  gameboxexpire_ = value;
}

// optional int32 serverTime = 13;
inline bool Ans_GameInfo::has_servertime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ans_GameInfo::set_has_servertime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ans_GameInfo::clear_has_servertime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ans_GameInfo::clear_servertime() {
  servertime_ = 0;
  clear_has_servertime();
}
inline ::google::protobuf::int32 Ans_GameInfo::servertime() const {
  return servertime_;
}
inline void Ans_GameInfo::set_servertime(::google::protobuf::int32 value) {
  set_has_servertime();
  servertime_ = value;
}

// optional int32 doneGuide = 14;
inline bool Ans_GameInfo::has_doneguide() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ans_GameInfo::set_has_doneguide() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Ans_GameInfo::clear_has_doneguide() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Ans_GameInfo::clear_doneguide() {
  doneguide_ = 0;
  clear_has_doneguide();
}
inline ::google::protobuf::int32 Ans_GameInfo::doneguide() const {
  return doneguide_;
}
inline void Ans_GameInfo::set_doneguide(::google::protobuf::int32 value) {
  set_has_doneguide();
  doneguide_ = value;
}

// optional int32 achieveID = 15;
inline bool Ans_GameInfo::has_achieveid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Ans_GameInfo::set_has_achieveid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Ans_GameInfo::clear_has_achieveid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Ans_GameInfo::clear_achieveid() {
  achieveid_ = 0;
  clear_has_achieveid();
}
inline ::google::protobuf::int32 Ans_GameInfo::achieveid() const {
  return achieveid_;
}
inline void Ans_GameInfo::set_achieveid(::google::protobuf::int32 value) {
  set_has_achieveid();
  achieveid_ = value;
}

// -------------------------------------------------------------------

// Req_EnterRoom

// required int32 roomID = 1;
inline bool Req_EnterRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_EnterRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_EnterRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_EnterRoom::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Req_EnterRoom::roomid() const {
  return roomid_;
}
inline void Req_EnterRoom::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_EnterRoom

// -------------------------------------------------------------------

// Req_LeaveRoom

// required int32 roomID = 1;
inline bool Req_LeaveRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_LeaveRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_LeaveRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_LeaveRoom::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Req_LeaveRoom::roomid() const {
  return roomid_;
}
inline void Req_LeaveRoom::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_LeaveRoom

// -------------------------------------------------------------------

// Req_GetTableList

// required int32 roomID = 1;
inline bool Req_GetTableList::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_GetTableList::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_GetTableList::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_GetTableList::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Req_GetTableList::roomid() const {
  return roomid_;
}
inline void Req_GetTableList::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_GetTableListInfo

// repeated .pf.Ans_SimpleTableInfo infos = 1;
inline int Ans_Pro_GetTableListInfo::infos_size() const {
  return infos_.size();
}
inline void Ans_Pro_GetTableListInfo::clear_infos() {
  infos_.Clear();
}
inline const ::pf::Ans_SimpleTableInfo& Ans_Pro_GetTableListInfo::infos(int index) const {
  return infos_.Get(index);
}
inline ::pf::Ans_SimpleTableInfo* Ans_Pro_GetTableListInfo::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::pf::Ans_SimpleTableInfo* Ans_Pro_GetTableListInfo::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleTableInfo >&
Ans_Pro_GetTableListInfo::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleTableInfo >*
Ans_Pro_GetTableListInfo::mutable_infos() {
  return &infos_;
}

// required int32 roomID = 2;
inline bool Ans_Pro_GetTableListInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_Pro_GetTableListInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_Pro_GetTableListInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_Pro_GetTableListInfo::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Ans_Pro_GetTableListInfo::roomid() const {
  return roomid_;
}
inline void Ans_Pro_GetTableListInfo::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// Ans_SimpleTableInfo

// required int32 tableID = 2;
inline bool Ans_SimpleTableInfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_SimpleTableInfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_SimpleTableInfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_SimpleTableInfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 Ans_SimpleTableInfo::tableid() const {
  return tableid_;
}
inline void Ans_SimpleTableInfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// required int32 propID = 4;
inline bool Ans_SimpleTableInfo::has_propid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_SimpleTableInfo::set_has_propid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_SimpleTableInfo::clear_has_propid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_SimpleTableInfo::clear_propid() {
  propid_ = 0;
  clear_has_propid();
}
inline ::google::protobuf::int32 Ans_SimpleTableInfo::propid() const {
  return propid_;
}
inline void Ans_SimpleTableInfo::set_propid(::google::protobuf::int32 value) {
  set_has_propid();
  propid_ = value;
}

// required int32 playerNum = 5 [default = 0];
inline bool Ans_SimpleTableInfo::has_playernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ans_SimpleTableInfo::set_has_playernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ans_SimpleTableInfo::clear_has_playernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ans_SimpleTableInfo::clear_playernum() {
  playernum_ = 0;
  clear_has_playernum();
}
inline ::google::protobuf::int32 Ans_SimpleTableInfo::playernum() const {
  return playernum_;
}
inline void Ans_SimpleTableInfo::set_playernum(::google::protobuf::int32 value) {
  set_has_playernum();
  playernum_ = value;
}

// required int32 standNum = 6 [default = 0];
inline bool Ans_SimpleTableInfo::has_standnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ans_SimpleTableInfo::set_has_standnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ans_SimpleTableInfo::clear_has_standnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ans_SimpleTableInfo::clear_standnum() {
  standnum_ = 0;
  clear_has_standnum();
}
inline ::google::protobuf::int32 Ans_SimpleTableInfo::standnum() const {
  return standnum_;
}
inline void Ans_SimpleTableInfo::set_standnum(::google::protobuf::int32 value) {
  set_has_standnum();
  standnum_ = value;
}

// required int32 gameState = 7 [default = 0];
inline bool Ans_SimpleTableInfo::has_gamestate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ans_SimpleTableInfo::set_has_gamestate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ans_SimpleTableInfo::clear_has_gamestate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ans_SimpleTableInfo::clear_gamestate() {
  gamestate_ = 0;
  clear_has_gamestate();
}
inline ::google::protobuf::int32 Ans_SimpleTableInfo::gamestate() const {
  return gamestate_;
}
inline void Ans_SimpleTableInfo::set_gamestate(::google::protobuf::int32 value) {
  set_has_gamestate();
  gamestate_ = value;
}

// repeated .pf.Ans_SimpleSeatInfo infos = 8;
inline int Ans_SimpleTableInfo::infos_size() const {
  return infos_.size();
}
inline void Ans_SimpleTableInfo::clear_infos() {
  infos_.Clear();
}
inline const ::pf::Ans_SimpleSeatInfo& Ans_SimpleTableInfo::infos(int index) const {
  return infos_.Get(index);
}
inline ::pf::Ans_SimpleSeatInfo* Ans_SimpleTableInfo::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::pf::Ans_SimpleSeatInfo* Ans_SimpleTableInfo::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleSeatInfo >&
Ans_SimpleTableInfo::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pf::Ans_SimpleSeatInfo >*
Ans_SimpleTableInfo::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// Ans_SimpleSeatInfo

// required int32 userID = 1 [default = 0];
inline bool Ans_SimpleSeatInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_SimpleSeatInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_SimpleSeatInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_SimpleSeatInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Ans_SimpleSeatInfo::userid() const {
  return userid_;
}
inline void Ans_SimpleSeatInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 readyState = 2 [default = 0];
inline bool Ans_SimpleSeatInfo::has_readystate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_SimpleSeatInfo::set_has_readystate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_SimpleSeatInfo::clear_has_readystate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_SimpleSeatInfo::clear_readystate() {
  readystate_ = 0;
  clear_has_readystate();
}
inline ::google::protobuf::int32 Ans_SimpleSeatInfo::readystate() const {
  return readystate_;
}
inline void Ans_SimpleSeatInfo::set_readystate(::google::protobuf::int32 value) {
  set_has_readystate();
  readystate_ = value;
}

// required string nickName = 3;
inline bool Ans_SimpleSeatInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ans_SimpleSeatInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ans_SimpleSeatInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ans_SimpleSeatInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Ans_SimpleSeatInfo::nickname() const {
  return *nickname_;
}
inline void Ans_SimpleSeatInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Ans_SimpleSeatInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Ans_SimpleSeatInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ans_SimpleSeatInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Ans_SimpleSeatInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ans_SimpleSeatInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string picUrl = 4;
inline bool Ans_SimpleSeatInfo::has_picurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ans_SimpleSeatInfo::set_has_picurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ans_SimpleSeatInfo::clear_has_picurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ans_SimpleSeatInfo::clear_picurl() {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    picurl_->clear();
  }
  clear_has_picurl();
}
inline const ::std::string& Ans_SimpleSeatInfo::picurl() const {
  return *picurl_;
}
inline void Ans_SimpleSeatInfo::set_picurl(const ::std::string& value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Ans_SimpleSeatInfo::set_picurl(const char* value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Ans_SimpleSeatInfo::set_picurl(const char* value, size_t size) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ans_SimpleSeatInfo::mutable_picurl() {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  return picurl_;
}
inline ::std::string* Ans_SimpleSeatInfo::release_picurl() {
  clear_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picurl_;
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ans_SimpleSeatInfo::set_allocated_picurl(::std::string* picurl) {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (picurl) {
    set_has_picurl();
    picurl_ = picurl;
  } else {
    clear_has_picurl();
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 seatID = 5;
inline bool Ans_SimpleSeatInfo::has_seatid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ans_SimpleSeatInfo::set_has_seatid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ans_SimpleSeatInfo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ans_SimpleSeatInfo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 Ans_SimpleSeatInfo::seatid() const {
  return seatid_;
}
inline void Ans_SimpleSeatInfo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// -------------------------------------------------------------------

// Req_EnterTable

// required int32 roomID = 1;
inline bool Req_EnterTable::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_EnterTable::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_EnterTable::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_EnterTable::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Req_EnterTable::roomid() const {
  return roomid_;
}
inline void Req_EnterTable::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 tableID = 2;
inline bool Req_EnterTable::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Req_EnterTable::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Req_EnterTable::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Req_EnterTable::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 Req_EnterTable::tableid() const {
  return tableid_;
}
inline void Req_EnterTable::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// required int32 seatID = 3 [default = 0];
inline bool Req_EnterTable::has_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Req_EnterTable::set_has_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Req_EnterTable::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Req_EnterTable::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 Req_EnterTable::seatid() const {
  return seatid_;
}
inline void Req_EnterTable::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// required int32 intent = 4 [default = 0];
inline bool Req_EnterTable::has_intent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Req_EnterTable::set_has_intent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Req_EnterTable::clear_has_intent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Req_EnterTable::clear_intent() {
  intent_ = 0;
  clear_has_intent();
}
inline ::google::protobuf::int32 Req_EnterTable::intent() const {
  return intent_;
}
inline void Req_EnterTable::set_intent(::google::protobuf::int32 value) {
  set_has_intent();
  intent_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_OnEnterTable

// required int32 roomID = 3;
inline bool Ans_Pro_OnEnterTable::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_Pro_OnEnterTable::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_Pro_OnEnterTable::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_Pro_OnEnterTable::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Ans_Pro_OnEnterTable::roomid() const {
  return roomid_;
}
inline void Ans_Pro_OnEnterTable::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 tableID = 4;
inline bool Ans_Pro_OnEnterTable::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_Pro_OnEnterTable::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_Pro_OnEnterTable::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_Pro_OnEnterTable::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 Ans_Pro_OnEnterTable::tableid() const {
  return tableid_;
}
inline void Ans_Pro_OnEnterTable::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// repeated .pf.Ans_TablePlayerInfo players = 7;
inline int Ans_Pro_OnEnterTable::players_size() const {
  return players_.size();
}
inline void Ans_Pro_OnEnterTable::clear_players() {
  players_.Clear();
}
inline const ::pf::Ans_TablePlayerInfo& Ans_Pro_OnEnterTable::players(int index) const {
  return players_.Get(index);
}
inline ::pf::Ans_TablePlayerInfo* Ans_Pro_OnEnterTable::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::pf::Ans_TablePlayerInfo* Ans_Pro_OnEnterTable::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pf::Ans_TablePlayerInfo >&
Ans_Pro_OnEnterTable::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::pf::Ans_TablePlayerInfo >*
Ans_Pro_OnEnterTable::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// Ans_TablePlayerInfo

// optional int32 seatID = 1;
inline bool Ans_TablePlayerInfo::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_TablePlayerInfo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_TablePlayerInfo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::seatid() const {
  return seatid_;
}
inline void Ans_TablePlayerInfo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 userID = 2;
inline bool Ans_TablePlayerInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_TablePlayerInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_TablePlayerInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::userid() const {
  return userid_;
}
inline void Ans_TablePlayerInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string nickName = 3;
inline bool Ans_TablePlayerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ans_TablePlayerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ans_TablePlayerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Ans_TablePlayerInfo::nickname() const {
  return *nickname_;
}
inline void Ans_TablePlayerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Ans_TablePlayerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Ans_TablePlayerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ans_TablePlayerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Ans_TablePlayerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ans_TablePlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string headUrl = 4;
inline bool Ans_TablePlayerInfo::has_headurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_headurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ans_TablePlayerInfo::clear_has_headurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ans_TablePlayerInfo::clear_headurl() {
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    headurl_->clear();
  }
  clear_has_headurl();
}
inline const ::std::string& Ans_TablePlayerInfo::headurl() const {
  return *headurl_;
}
inline void Ans_TablePlayerInfo::set_headurl(const ::std::string& value) {
  set_has_headurl();
  if (headurl_ == &::google::protobuf::internal::kEmptyString) {
    headurl_ = new ::std::string;
  }
  headurl_->assign(value);
}
inline void Ans_TablePlayerInfo::set_headurl(const char* value) {
  set_has_headurl();
  if (headurl_ == &::google::protobuf::internal::kEmptyString) {
    headurl_ = new ::std::string;
  }
  headurl_->assign(value);
}
inline void Ans_TablePlayerInfo::set_headurl(const char* value, size_t size) {
  set_has_headurl();
  if (headurl_ == &::google::protobuf::internal::kEmptyString) {
    headurl_ = new ::std::string;
  }
  headurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ans_TablePlayerInfo::mutable_headurl() {
  set_has_headurl();
  if (headurl_ == &::google::protobuf::internal::kEmptyString) {
    headurl_ = new ::std::string;
  }
  return headurl_;
}
inline ::std::string* Ans_TablePlayerInfo::release_headurl() {
  clear_has_headurl();
  if (headurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headurl_;
    headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ans_TablePlayerInfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (headurl) {
    set_has_headurl();
    headurl_ = headurl;
  } else {
    clear_has_headurl();
    headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isAdmin = 5 [default = 0];
inline bool Ans_TablePlayerInfo::has_isadmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_isadmin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ans_TablePlayerInfo::clear_has_isadmin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ans_TablePlayerInfo::clear_isadmin() {
  isadmin_ = 0;
  clear_has_isadmin();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::isadmin() const {
  return isadmin_;
}
inline void Ans_TablePlayerInfo::set_isadmin(::google::protobuf::int32 value) {
  set_has_isadmin();
  isadmin_ = value;
}

// optional int32 win = 6 [default = 0];
inline bool Ans_TablePlayerInfo::has_win() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_win() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ans_TablePlayerInfo::clear_has_win() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ans_TablePlayerInfo::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::win() const {
  return win_;
}
inline void Ans_TablePlayerInfo::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
}

// optional int32 loss = 7 [default = 0];
inline bool Ans_TablePlayerInfo::has_loss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_loss() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ans_TablePlayerInfo::clear_has_loss() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ans_TablePlayerInfo::clear_loss() {
  loss_ = 0;
  clear_has_loss();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::loss() const {
  return loss_;
}
inline void Ans_TablePlayerInfo::set_loss(::google::protobuf::int32 value) {
  set_has_loss();
  loss_ = value;
}

// optional int32 equal = 8 [default = 0];
inline bool Ans_TablePlayerInfo::has_equal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_equal() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ans_TablePlayerInfo::clear_has_equal() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ans_TablePlayerInfo::clear_equal() {
  equal_ = 0;
  clear_has_equal();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::equal() const {
  return equal_;
}
inline void Ans_TablePlayerInfo::set_equal(::google::protobuf::int32 value) {
  set_has_equal();
  equal_ = value;
}

// optional int32 esc = 9 [default = 0];
inline bool Ans_TablePlayerInfo::has_esc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_esc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ans_TablePlayerInfo::clear_has_esc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ans_TablePlayerInfo::clear_esc() {
  esc_ = 0;
  clear_has_esc();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::esc() const {
  return esc_;
}
inline void Ans_TablePlayerInfo::set_esc(::google::protobuf::int32 value) {
  set_has_esc();
  esc_ = value;
}

// optional int32 coin = 10 [default = 0];
inline bool Ans_TablePlayerInfo::has_coin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_coin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ans_TablePlayerInfo::clear_has_coin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ans_TablePlayerInfo::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::coin() const {
  return coin_;
}
inline void Ans_TablePlayerInfo::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// optional int32 points = 11 [default = 0];
inline bool Ans_TablePlayerInfo::has_points() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_points() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ans_TablePlayerInfo::clear_has_points() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ans_TablePlayerInfo::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::points() const {
  return points_;
}
inline void Ans_TablePlayerInfo::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
}

// optional int32 sex = 12 [default = 0];
inline bool Ans_TablePlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ans_TablePlayerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ans_TablePlayerInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::sex() const {
  return sex_;
}
inline void Ans_TablePlayerInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 achieveID = 13;
inline bool Ans_TablePlayerInfo::has_achieveid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_achieveid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ans_TablePlayerInfo::clear_has_achieveid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ans_TablePlayerInfo::clear_achieveid() {
  achieveid_ = 0;
  clear_has_achieveid();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::achieveid() const {
  return achieveid_;
}
inline void Ans_TablePlayerInfo::set_achieveid(::google::protobuf::int32 value) {
  set_has_achieveid();
  achieveid_ = value;
}

// optional int32 gameBoxID = 14;
inline bool Ans_TablePlayerInfo::has_gameboxid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_gameboxid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Ans_TablePlayerInfo::clear_has_gameboxid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Ans_TablePlayerInfo::clear_gameboxid() {
  gameboxid_ = 0;
  clear_has_gameboxid();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::gameboxid() const {
  return gameboxid_;
}
inline void Ans_TablePlayerInfo::set_gameboxid(::google::protobuf::int32 value) {
  set_has_gameboxid();
  gameboxid_ = value;
}

// optional int32 isLooker = 15;
inline bool Ans_TablePlayerInfo::has_islooker() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Ans_TablePlayerInfo::set_has_islooker() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Ans_TablePlayerInfo::clear_has_islooker() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Ans_TablePlayerInfo::clear_islooker() {
  islooker_ = 0;
  clear_has_islooker();
}
inline ::google::protobuf::int32 Ans_TablePlayerInfo::islooker() const {
  return islooker_;
}
inline void Ans_TablePlayerInfo::set_islooker(::google::protobuf::int32 value) {
  set_has_islooker();
  islooker_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_AddTablePlayer

// required .pf.Ans_TablePlayerInfo players = 1;
inline bool Ans_Pro_AddTablePlayer::has_players() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_Pro_AddTablePlayer::set_has_players() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_Pro_AddTablePlayer::clear_has_players() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_Pro_AddTablePlayer::clear_players() {
  if (players_ != NULL) players_->::pf::Ans_TablePlayerInfo::Clear();
  clear_has_players();
}
inline const ::pf::Ans_TablePlayerInfo& Ans_Pro_AddTablePlayer::players() const {
  return players_ != NULL ? *players_ : *default_instance_->players_;
}
inline ::pf::Ans_TablePlayerInfo* Ans_Pro_AddTablePlayer::mutable_players() {
  set_has_players();
  if (players_ == NULL) players_ = new ::pf::Ans_TablePlayerInfo;
  return players_;
}
inline ::pf::Ans_TablePlayerInfo* Ans_Pro_AddTablePlayer::release_players() {
  clear_has_players();
  ::pf::Ans_TablePlayerInfo* temp = players_;
  players_ = NULL;
  return temp;
}
inline void Ans_Pro_AddTablePlayer::set_allocated_players(::pf::Ans_TablePlayerInfo* players) {
  delete players_;
  players_ = players;
  if (players) {
    set_has_players();
  } else {
    clear_has_players();
  }
}

// -------------------------------------------------------------------

// Req_SitDown

// required int32 roomID = 1;
inline bool Req_SitDown::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_SitDown::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_SitDown::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_SitDown::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Req_SitDown::roomid() const {
  return roomid_;
}
inline void Req_SitDown::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 seatID = 3;
inline bool Req_SitDown::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Req_SitDown::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Req_SitDown::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Req_SitDown::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 Req_SitDown::seatid() const {
  return seatid_;
}
inline void Req_SitDown::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_NotifySitDown

// required int32 userID = 1;
inline bool Ans_Pro_NotifySitDown::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_Pro_NotifySitDown::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_Pro_NotifySitDown::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_Pro_NotifySitDown::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Ans_Pro_NotifySitDown::userid() const {
  return userid_;
}
inline void Ans_Pro_NotifySitDown::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 seatID = 2;
inline bool Ans_Pro_NotifySitDown::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_Pro_NotifySitDown::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_Pro_NotifySitDown::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_Pro_NotifySitDown::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 Ans_Pro_NotifySitDown::seatid() const {
  return seatid_;
}
inline void Ans_Pro_NotifySitDown::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// -------------------------------------------------------------------

// Req_ReadyGame

// required int32 roomID = 1;
inline bool Req_ReadyGame::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_ReadyGame::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_ReadyGame::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_ReadyGame::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Req_ReadyGame::roomid() const {
  return roomid_;
}
inline void Req_ReadyGame::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_ReadyGame

// -------------------------------------------------------------------

// Req_StandUp

// required int32 roomID = 1;
inline bool Req_StandUp::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_StandUp::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_StandUp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_StandUp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Req_StandUp::roomid() const {
  return roomid_;
}
inline void Req_StandUp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_NotifyStandUp

// required int32 userID = 1;
inline bool Ans_Pro_NotifyStandUp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_Pro_NotifyStandUp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_Pro_NotifyStandUp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_Pro_NotifyStandUp::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Ans_Pro_NotifyStandUp::userid() const {
  return userid_;
}
inline void Ans_Pro_NotifyStandUp::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// Req_LeaveTable

// required int32 roomID = 1;
inline bool Req_LeaveTable::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_LeaveTable::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_LeaveTable::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_LeaveTable::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Req_LeaveTable::roomid() const {
  return roomid_;
}
inline void Req_LeaveTable::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// Ans_Pro_LeaveTable

// -------------------------------------------------------------------

// Ans_Pro_DelTablePlayer

// required int32 userID = 1;
inline bool Ans_Pro_DelTablePlayer::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_Pro_DelTablePlayer::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_Pro_DelTablePlayer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_Pro_DelTablePlayer::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Ans_Pro_DelTablePlayer::userid() const {
  return userid_;
}
inline void Ans_Pro_DelTablePlayer::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// Pro_GameMsg

// optional int32 roomID = 1;
inline bool Pro_GameMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pro_GameMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pro_GameMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pro_GameMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Pro_GameMsg::roomid() const {
  return roomid_;
}
inline void Pro_GameMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 tableID = 2;
inline bool Pro_GameMsg::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pro_GameMsg::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pro_GameMsg::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pro_GameMsg::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 Pro_GameMsg::tableid() const {
  return tableid_;
}
inline void Pro_GameMsg::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// required int32 gameCmdID = 3;
inline bool Pro_GameMsg::has_gamecmdid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pro_GameMsg::set_has_gamecmdid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pro_GameMsg::clear_has_gamecmdid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pro_GameMsg::clear_gamecmdid() {
  gamecmdid_ = 0;
  clear_has_gamecmdid();
}
inline ::google::protobuf::int32 Pro_GameMsg::gamecmdid() const {
  return gamecmdid_;
}
inline void Pro_GameMsg::set_gamecmdid(::google::protobuf::int32 value) {
  set_has_gamecmdid();
  gamecmdid_ = value;
}

// optional bytes paramBytes = 4;
inline bool Pro_GameMsg::has_parambytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pro_GameMsg::set_has_parambytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pro_GameMsg::clear_has_parambytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pro_GameMsg::clear_parambytes() {
  if (parambytes_ != &::google::protobuf::internal::kEmptyString) {
    parambytes_->clear();
  }
  clear_has_parambytes();
}
inline const ::std::string& Pro_GameMsg::parambytes() const {
  return *parambytes_;
}
inline void Pro_GameMsg::set_parambytes(const ::std::string& value) {
  set_has_parambytes();
  if (parambytes_ == &::google::protobuf::internal::kEmptyString) {
    parambytes_ = new ::std::string;
  }
  parambytes_->assign(value);
}
inline void Pro_GameMsg::set_parambytes(const char* value) {
  set_has_parambytes();
  if (parambytes_ == &::google::protobuf::internal::kEmptyString) {
    parambytes_ = new ::std::string;
  }
  parambytes_->assign(value);
}
inline void Pro_GameMsg::set_parambytes(const void* value, size_t size) {
  set_has_parambytes();
  if (parambytes_ == &::google::protobuf::internal::kEmptyString) {
    parambytes_ = new ::std::string;
  }
  parambytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pro_GameMsg::mutable_parambytes() {
  set_has_parambytes();
  if (parambytes_ == &::google::protobuf::internal::kEmptyString) {
    parambytes_ = new ::std::string;
  }
  return parambytes_;
}
inline ::std::string* Pro_GameMsg::release_parambytes() {
  clear_has_parambytes();
  if (parambytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parambytes_;
    parambytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pro_GameMsg::set_allocated_parambytes(::std::string* parambytes) {
  if (parambytes_ != &::google::protobuf::internal::kEmptyString) {
    delete parambytes_;
  }
  if (parambytes) {
    set_has_parambytes();
    parambytes_ = parambytes;
  } else {
    clear_has_parambytes();
    parambytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Ans_Pro_TablePlayerInfoChange

// required int32 userID = 1;
inline bool Ans_Pro_TablePlayerInfoChange::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_Pro_TablePlayerInfoChange::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_Pro_TablePlayerInfoChange::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_Pro_TablePlayerInfoChange::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Ans_Pro_TablePlayerInfoChange::userid() const {
  return userid_;
}
inline void Ans_Pro_TablePlayerInfoChange::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required .pf.Ans_TablePlayerInfo infos = 2;
inline bool Ans_Pro_TablePlayerInfoChange::has_infos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_Pro_TablePlayerInfoChange::set_has_infos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_Pro_TablePlayerInfoChange::clear_has_infos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_Pro_TablePlayerInfoChange::clear_infos() {
  if (infos_ != NULL) infos_->::pf::Ans_TablePlayerInfo::Clear();
  clear_has_infos();
}
inline const ::pf::Ans_TablePlayerInfo& Ans_Pro_TablePlayerInfoChange::infos() const {
  return infos_ != NULL ? *infos_ : *default_instance_->infos_;
}
inline ::pf::Ans_TablePlayerInfo* Ans_Pro_TablePlayerInfoChange::mutable_infos() {
  set_has_infos();
  if (infos_ == NULL) infos_ = new ::pf::Ans_TablePlayerInfo;
  return infos_;
}
inline ::pf::Ans_TablePlayerInfo* Ans_Pro_TablePlayerInfoChange::release_infos() {
  clear_has_infos();
  ::pf::Ans_TablePlayerInfo* temp = infos_;
  infos_ = NULL;
  return temp;
}
inline void Ans_Pro_TablePlayerInfoChange::set_allocated_infos(::pf::Ans_TablePlayerInfo* infos) {
  delete infos_;
  infos_ = infos;
  if (infos) {
    set_has_infos();
  } else {
    clear_has_infos();
  }
}

// -------------------------------------------------------------------

// ErrorMes

// required int32 errorCode = 1;
inline bool ErrorMes::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorMes::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorMes::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorMes::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 ErrorMes::errorcode() const {
  return errorcode_;
}
inline void ErrorMes::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// required string errorMsg = 2;
inline bool ErrorMes::has_errormsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorMes::set_has_errormsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorMes::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorMes::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& ErrorMes::errormsg() const {
  return *errormsg_;
}
inline void ErrorMes::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void ErrorMes::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void ErrorMes::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ErrorMes::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* ErrorMes::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ErrorMes::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (errormsg) {
    set_has_errormsg();
    errormsg_ = errormsg;
  } else {
    clear_has_errormsg();
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Req_Test

// required int32 uid = 1;
inline bool Req_Test::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req_Test::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req_Test::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req_Test::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Req_Test::uid() const {
  return uid_;
}
inline void Req_Test::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// required string name = 2 [default = ""];
inline bool Req_Test::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Req_Test::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Req_Test::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Req_Test::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Req_Test::name() const {
  return *name_;
}
inline void Req_Test::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Req_Test::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Req_Test::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Req_Test::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Req_Test::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Req_Test::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes buf = 3;
inline bool Req_Test::has_buf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Req_Test::set_has_buf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Req_Test::clear_has_buf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Req_Test::clear_buf() {
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    buf_->clear();
  }
  clear_has_buf();
}
inline const ::std::string& Req_Test::buf() const {
  return *buf_;
}
inline void Req_Test::set_buf(const ::std::string& value) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(value);
}
inline void Req_Test::set_buf(const char* value) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(value);
}
inline void Req_Test::set_buf(const void* value, size_t size) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Req_Test::mutable_buf() {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  return buf_;
}
inline ::std::string* Req_Test::release_buf() {
  clear_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buf_;
    buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Req_Test::set_allocated_buf(::std::string* buf) {
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    delete buf_;
  }
  if (buf) {
    set_has_buf();
    buf_ = buf;
  } else {
    clear_has_buf();
    buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Ans_Test

// required int32 uid = 1;
inline bool Ans_Test::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ans_Test::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ans_Test::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ans_Test::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Ans_Test::uid() const {
  return uid_;
}
inline void Ans_Test::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes buf = 2;
inline bool Ans_Test::has_buf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ans_Test::set_has_buf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ans_Test::clear_has_buf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ans_Test::clear_buf() {
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    buf_->clear();
  }
  clear_has_buf();
}
inline const ::std::string& Ans_Test::buf() const {
  return *buf_;
}
inline void Ans_Test::set_buf(const ::std::string& value) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(value);
}
inline void Ans_Test::set_buf(const char* value) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(value);
}
inline void Ans_Test::set_buf(const void* value, size_t size) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ans_Test::mutable_buf() {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  return buf_;
}
inline ::std::string* Ans_Test::release_buf() {
  clear_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buf_;
    buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ans_Test::set_allocated_buf(::std::string* buf) {
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    delete buf_;
  }
  if (buf) {
    set_has_buf();
    buf_ = buf;
  } else {
    clear_has_buf();
    buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3 [default = ""];
inline bool Ans_Test::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ans_Test::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ans_Test::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ans_Test::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Ans_Test::name() const {
  return *name_;
}
inline void Ans_Test::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Ans_Test::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Ans_Test::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ans_Test::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Ans_Test::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ans_Test::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pf_2eproto__INCLUDED
