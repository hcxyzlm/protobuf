// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pf {

namespace {

const ::google::protobuf::Descriptor* Req_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_BaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_BaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_EnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_EnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_EnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_EnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_LeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_LeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_LeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_LeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_GetTableList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_GetTableList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_GetTableListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_GetTableListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_SimpleTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_SimpleTableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_SimpleSeatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_SimpleSeatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_EnterTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_EnterTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_OnEnterTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_OnEnterTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_TablePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_TablePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_AddTablePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_AddTablePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_SitDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_SitDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_NotifySitDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_NotifySitDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_ReadyGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_ReadyGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_ReadyGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_ReadyGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_StandUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_StandUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_NotifyStandUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_NotifyStandUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_LeaveTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_LeaveTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_LeaveTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_LeaveTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_DelTablePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_DelTablePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pro_GameMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pro_GameMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Pro_TablePlayerInfoChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Pro_TablePlayerInfoChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorMes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorMes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req_Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req_Test_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ans_Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ans_Test_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pf_2eproto() {
  protobuf_AddDesc_pf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pf.proto");
  GOOGLE_CHECK(file != NULL);
  Req_Login_descriptor_ = file->message_type(0);
  static const int Req_Login_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, certstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, isnewuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, picurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, gameid_),
  };
  Req_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_Login_descriptor_,
      Req_Login::default_instance_,
      Req_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_Login));
  Ans_Pro_Login_descriptor_ = file->message_type(1);
  static const int Ans_Pro_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_Login, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_Login, gameinfo_),
  };
  Ans_Pro_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_Login_descriptor_,
      Ans_Pro_Login::default_instance_,
      Ans_Pro_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_Login));
  Ans_BaseInfo_descriptor_ = file->message_type(2);
  static const int Ans_BaseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_BaseInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_BaseInfo, picurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_BaseInfo, loginnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_BaseInfo, loginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_BaseInfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_BaseInfo, createtime_),
  };
  Ans_BaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_BaseInfo_descriptor_,
      Ans_BaseInfo::default_instance_,
      Ans_BaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_BaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_BaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_BaseInfo));
  Ans_GameInfo_descriptor_ = file->message_type(3);
  static const int Ans_GameInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, equal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, esc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, org_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, orgstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, gameboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, gameboxexpire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, doneguide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, achieveid_),
  };
  Ans_GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_GameInfo_descriptor_,
      Ans_GameInfo::default_instance_,
      Ans_GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_GameInfo));
  Req_EnterRoom_descriptor_ = file->message_type(4);
  static const int Req_EnterRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterRoom, roomid_),
  };
  Req_EnterRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_EnterRoom_descriptor_,
      Req_EnterRoom::default_instance_,
      Req_EnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_EnterRoom));
  Ans_Pro_EnterRoom_descriptor_ = file->message_type(5);
  static const int Ans_Pro_EnterRoom_offsets_[1] = {
  };
  Ans_Pro_EnterRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_EnterRoom_descriptor_,
      Ans_Pro_EnterRoom::default_instance_,
      Ans_Pro_EnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_EnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_EnterRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_EnterRoom));
  Req_LeaveRoom_descriptor_ = file->message_type(6);
  static const int Req_LeaveRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_LeaveRoom, roomid_),
  };
  Req_LeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_LeaveRoom_descriptor_,
      Req_LeaveRoom::default_instance_,
      Req_LeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_LeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_LeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_LeaveRoom));
  Ans_Pro_LeaveRoom_descriptor_ = file->message_type(7);
  static const int Ans_Pro_LeaveRoom_offsets_[1] = {
  };
  Ans_Pro_LeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_LeaveRoom_descriptor_,
      Ans_Pro_LeaveRoom::default_instance_,
      Ans_Pro_LeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_LeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_LeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_LeaveRoom));
  Req_GetTableList_descriptor_ = file->message_type(8);
  static const int Req_GetTableList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_GetTableList, roomid_),
  };
  Req_GetTableList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_GetTableList_descriptor_,
      Req_GetTableList::default_instance_,
      Req_GetTableList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_GetTableList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_GetTableList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_GetTableList));
  Ans_Pro_GetTableListInfo_descriptor_ = file->message_type(9);
  static const int Ans_Pro_GetTableListInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_GetTableListInfo, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_GetTableListInfo, roomid_),
  };
  Ans_Pro_GetTableListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_GetTableListInfo_descriptor_,
      Ans_Pro_GetTableListInfo::default_instance_,
      Ans_Pro_GetTableListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_GetTableListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_GetTableListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_GetTableListInfo));
  Ans_SimpleTableInfo_descriptor_ = file->message_type(10);
  static const int Ans_SimpleTableInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleTableInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleTableInfo, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleTableInfo, playernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleTableInfo, standnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleTableInfo, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleTableInfo, infos_),
  };
  Ans_SimpleTableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_SimpleTableInfo_descriptor_,
      Ans_SimpleTableInfo::default_instance_,
      Ans_SimpleTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleTableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_SimpleTableInfo));
  Ans_SimpleSeatInfo_descriptor_ = file->message_type(11);
  static const int Ans_SimpleSeatInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleSeatInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleSeatInfo, readystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleSeatInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleSeatInfo, picurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleSeatInfo, seatid_),
  };
  Ans_SimpleSeatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_SimpleSeatInfo_descriptor_,
      Ans_SimpleSeatInfo::default_instance_,
      Ans_SimpleSeatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleSeatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_SimpleSeatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_SimpleSeatInfo));
  Req_EnterTable_descriptor_ = file->message_type(12);
  static const int Req_EnterTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterTable, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterTable, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterTable, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterTable, intent_),
  };
  Req_EnterTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_EnterTable_descriptor_,
      Req_EnterTable::default_instance_,
      Req_EnterTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_EnterTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_EnterTable));
  Ans_Pro_OnEnterTable_descriptor_ = file->message_type(13);
  static const int Ans_Pro_OnEnterTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_OnEnterTable, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_OnEnterTable, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_OnEnterTable, players_),
  };
  Ans_Pro_OnEnterTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_OnEnterTable_descriptor_,
      Ans_Pro_OnEnterTable::default_instance_,
      Ans_Pro_OnEnterTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_OnEnterTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_OnEnterTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_OnEnterTable));
  Ans_TablePlayerInfo_descriptor_ = file->message_type(14);
  static const int Ans_TablePlayerInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, isadmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, equal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, esc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, achieveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, gameboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, islooker_),
  };
  Ans_TablePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_TablePlayerInfo_descriptor_,
      Ans_TablePlayerInfo::default_instance_,
      Ans_TablePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_TablePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_TablePlayerInfo));
  Ans_Pro_AddTablePlayer_descriptor_ = file->message_type(15);
  static const int Ans_Pro_AddTablePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_AddTablePlayer, players_),
  };
  Ans_Pro_AddTablePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_AddTablePlayer_descriptor_,
      Ans_Pro_AddTablePlayer::default_instance_,
      Ans_Pro_AddTablePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_AddTablePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_AddTablePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_AddTablePlayer));
  Req_SitDown_descriptor_ = file->message_type(16);
  static const int Req_SitDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_SitDown, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_SitDown, seatid_),
  };
  Req_SitDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_SitDown_descriptor_,
      Req_SitDown::default_instance_,
      Req_SitDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_SitDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_SitDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_SitDown));
  Ans_Pro_NotifySitDown_descriptor_ = file->message_type(17);
  static const int Ans_Pro_NotifySitDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_NotifySitDown, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_NotifySitDown, seatid_),
  };
  Ans_Pro_NotifySitDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_NotifySitDown_descriptor_,
      Ans_Pro_NotifySitDown::default_instance_,
      Ans_Pro_NotifySitDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_NotifySitDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_NotifySitDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_NotifySitDown));
  Req_ReadyGame_descriptor_ = file->message_type(18);
  static const int Req_ReadyGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_ReadyGame, roomid_),
  };
  Req_ReadyGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_ReadyGame_descriptor_,
      Req_ReadyGame::default_instance_,
      Req_ReadyGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_ReadyGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_ReadyGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_ReadyGame));
  Ans_Pro_ReadyGame_descriptor_ = file->message_type(19);
  static const int Ans_Pro_ReadyGame_offsets_[1] = {
  };
  Ans_Pro_ReadyGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_ReadyGame_descriptor_,
      Ans_Pro_ReadyGame::default_instance_,
      Ans_Pro_ReadyGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_ReadyGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_ReadyGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_ReadyGame));
  Req_StandUp_descriptor_ = file->message_type(20);
  static const int Req_StandUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_StandUp, roomid_),
  };
  Req_StandUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_StandUp_descriptor_,
      Req_StandUp::default_instance_,
      Req_StandUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_StandUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_StandUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_StandUp));
  Ans_Pro_NotifyStandUp_descriptor_ = file->message_type(21);
  static const int Ans_Pro_NotifyStandUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_NotifyStandUp, userid_),
  };
  Ans_Pro_NotifyStandUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_NotifyStandUp_descriptor_,
      Ans_Pro_NotifyStandUp::default_instance_,
      Ans_Pro_NotifyStandUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_NotifyStandUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_NotifyStandUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_NotifyStandUp));
  Req_LeaveTable_descriptor_ = file->message_type(22);
  static const int Req_LeaveTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_LeaveTable, roomid_),
  };
  Req_LeaveTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_LeaveTable_descriptor_,
      Req_LeaveTable::default_instance_,
      Req_LeaveTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_LeaveTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_LeaveTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_LeaveTable));
  Ans_Pro_LeaveTable_descriptor_ = file->message_type(23);
  static const int Ans_Pro_LeaveTable_offsets_[1] = {
  };
  Ans_Pro_LeaveTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_LeaveTable_descriptor_,
      Ans_Pro_LeaveTable::default_instance_,
      Ans_Pro_LeaveTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_LeaveTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_LeaveTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_LeaveTable));
  Ans_Pro_DelTablePlayer_descriptor_ = file->message_type(24);
  static const int Ans_Pro_DelTablePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_DelTablePlayer, userid_),
  };
  Ans_Pro_DelTablePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_DelTablePlayer_descriptor_,
      Ans_Pro_DelTablePlayer::default_instance_,
      Ans_Pro_DelTablePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_DelTablePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_DelTablePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_DelTablePlayer));
  Pro_GameMsg_descriptor_ = file->message_type(25);
  static const int Pro_GameMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pro_GameMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pro_GameMsg, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pro_GameMsg, gamecmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pro_GameMsg, parambytes_),
  };
  Pro_GameMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pro_GameMsg_descriptor_,
      Pro_GameMsg::default_instance_,
      Pro_GameMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pro_GameMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pro_GameMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pro_GameMsg));
  Ans_Pro_TablePlayerInfoChange_descriptor_ = file->message_type(26);
  static const int Ans_Pro_TablePlayerInfoChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_TablePlayerInfoChange, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_TablePlayerInfoChange, infos_),
  };
  Ans_Pro_TablePlayerInfoChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Pro_TablePlayerInfoChange_descriptor_,
      Ans_Pro_TablePlayerInfoChange::default_instance_,
      Ans_Pro_TablePlayerInfoChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_TablePlayerInfoChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Pro_TablePlayerInfoChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Pro_TablePlayerInfoChange));
  ErrorMes_descriptor_ = file->message_type(27);
  static const int ErrorMes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMes, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMes, errormsg_),
  };
  ErrorMes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorMes_descriptor_,
      ErrorMes::default_instance_,
      ErrorMes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorMes));
  Req_Test_descriptor_ = file->message_type(28);
  static const int Req_Test_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Test, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Test, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Test, buf_),
  };
  Req_Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req_Test_descriptor_,
      Req_Test::default_instance_,
      Req_Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req_Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req_Test));
  Ans_Test_descriptor_ = file->message_type(29);
  static const int Ans_Test_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Test, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Test, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Test, name_),
  };
  Ans_Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ans_Test_descriptor_,
      Ans_Test::default_instance_,
      Ans_Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ans_Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ans_Test));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_Login_descriptor_, &Req_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_Login_descriptor_, &Ans_Pro_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_BaseInfo_descriptor_, &Ans_BaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_GameInfo_descriptor_, &Ans_GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_EnterRoom_descriptor_, &Req_EnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_EnterRoom_descriptor_, &Ans_Pro_EnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_LeaveRoom_descriptor_, &Req_LeaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_LeaveRoom_descriptor_, &Ans_Pro_LeaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_GetTableList_descriptor_, &Req_GetTableList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_GetTableListInfo_descriptor_, &Ans_Pro_GetTableListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_SimpleTableInfo_descriptor_, &Ans_SimpleTableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_SimpleSeatInfo_descriptor_, &Ans_SimpleSeatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_EnterTable_descriptor_, &Req_EnterTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_OnEnterTable_descriptor_, &Ans_Pro_OnEnterTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_TablePlayerInfo_descriptor_, &Ans_TablePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_AddTablePlayer_descriptor_, &Ans_Pro_AddTablePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_SitDown_descriptor_, &Req_SitDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_NotifySitDown_descriptor_, &Ans_Pro_NotifySitDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_ReadyGame_descriptor_, &Req_ReadyGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_ReadyGame_descriptor_, &Ans_Pro_ReadyGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_StandUp_descriptor_, &Req_StandUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_NotifyStandUp_descriptor_, &Ans_Pro_NotifyStandUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_LeaveTable_descriptor_, &Req_LeaveTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_LeaveTable_descriptor_, &Ans_Pro_LeaveTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_DelTablePlayer_descriptor_, &Ans_Pro_DelTablePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pro_GameMsg_descriptor_, &Pro_GameMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Pro_TablePlayerInfoChange_descriptor_, &Ans_Pro_TablePlayerInfoChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorMes_descriptor_, &ErrorMes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req_Test_descriptor_, &Req_Test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ans_Test_descriptor_, &Ans_Test::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pf_2eproto() {
  delete Req_Login::default_instance_;
  delete Req_Login_reflection_;
  delete Ans_Pro_Login::default_instance_;
  delete Ans_Pro_Login_reflection_;
  delete Ans_BaseInfo::default_instance_;
  delete Ans_BaseInfo_reflection_;
  delete Ans_GameInfo::default_instance_;
  delete Ans_GameInfo_reflection_;
  delete Req_EnterRoom::default_instance_;
  delete Req_EnterRoom_reflection_;
  delete Ans_Pro_EnterRoom::default_instance_;
  delete Ans_Pro_EnterRoom_reflection_;
  delete Req_LeaveRoom::default_instance_;
  delete Req_LeaveRoom_reflection_;
  delete Ans_Pro_LeaveRoom::default_instance_;
  delete Ans_Pro_LeaveRoom_reflection_;
  delete Req_GetTableList::default_instance_;
  delete Req_GetTableList_reflection_;
  delete Ans_Pro_GetTableListInfo::default_instance_;
  delete Ans_Pro_GetTableListInfo_reflection_;
  delete Ans_SimpleTableInfo::default_instance_;
  delete Ans_SimpleTableInfo_reflection_;
  delete Ans_SimpleSeatInfo::default_instance_;
  delete Ans_SimpleSeatInfo_reflection_;
  delete Req_EnterTable::default_instance_;
  delete Req_EnterTable_reflection_;
  delete Ans_Pro_OnEnterTable::default_instance_;
  delete Ans_Pro_OnEnterTable_reflection_;
  delete Ans_TablePlayerInfo::default_instance_;
  delete Ans_TablePlayerInfo_reflection_;
  delete Ans_Pro_AddTablePlayer::default_instance_;
  delete Ans_Pro_AddTablePlayer_reflection_;
  delete Req_SitDown::default_instance_;
  delete Req_SitDown_reflection_;
  delete Ans_Pro_NotifySitDown::default_instance_;
  delete Ans_Pro_NotifySitDown_reflection_;
  delete Req_ReadyGame::default_instance_;
  delete Req_ReadyGame_reflection_;
  delete Ans_Pro_ReadyGame::default_instance_;
  delete Ans_Pro_ReadyGame_reflection_;
  delete Req_StandUp::default_instance_;
  delete Req_StandUp_reflection_;
  delete Ans_Pro_NotifyStandUp::default_instance_;
  delete Ans_Pro_NotifyStandUp_reflection_;
  delete Req_LeaveTable::default_instance_;
  delete Req_LeaveTable_reflection_;
  delete Ans_Pro_LeaveTable::default_instance_;
  delete Ans_Pro_LeaveTable_reflection_;
  delete Ans_Pro_DelTablePlayer::default_instance_;
  delete Ans_Pro_DelTablePlayer_reflection_;
  delete Pro_GameMsg::default_instance_;
  delete Pro_GameMsg_reflection_;
  delete Ans_Pro_TablePlayerInfoChange::default_instance_;
  delete Ans_Pro_TablePlayerInfoChange_reflection_;
  delete ErrorMes::default_instance_;
  delete ErrorMes_reflection_;
  delete Req_Test::default_instance_;
  delete Req_Test_reflection_;
  delete Ans_Test::default_instance_;
  delete Ans_Test_reflection_;
}

void protobuf_AddDesc_pf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010pf.proto\022\002pf\"\236\001\n\tReq_Login\022\016\n\006userID\030\001"
    " \002(\005\022\022\n\nexpireTime\030\002 \002(\005\022\017\n\007certStr\030\003 \002("
    "\t\022\021\n\tisNewUser\030\004 \002(\010\022\020\n\010nickName\030\005 \002(\t\022\016"
    "\n\006picUrl\030\006 \002(\t\022\n\n\002pf\030\007 \001(\t\022\013\n\003sex\030\010 \001(\005\022"
    "\016\n\006gameID\030\t \002(\005\"W\n\rAns_Pro_Login\022\"\n\010base"
    "Info\030\001 \002(\0132\020.pf.Ans_BaseInfo\022\"\n\010gameInfo"
    "\030\002 \002(\0132\020.pf.Ans_GameInfo\"~\n\014Ans_BaseInfo"
    "\022\020\n\010nickName\030\002 \002(\t\022\016\n\006picUrl\030\003 \002(\t\022\020\n\010lo"
    "ginNum\030\004 \002(\005\022\017\n\007loginIP\030\005 \002(\005\022\025\n\rlastLog"
    "inTime\030\006 \002(\005\022\022\n\ncreateTime\030\007 \002(\005\"\207\002\n\014Ans"
    "_GameInfo\022\014\n\004coin\030\001 \002(\005\022\016\n\006points\030\002 \002(\005\022"
    "\013\n\003win\030\003 \002(\005\022\014\n\004loss\030\004 \002(\005\022\r\n\005equal\030\005 \002("
    "\005\022\013\n\003esc\030\006 \002(\005\022\013\n\003org\030\007 \002(\005\022\r\n\005title\030\010 \002"
    "(\005\022\020\n\010orgState\030\t \002(\005\022\020\n\010gameTime\030\n \002(\005\022\021"
    "\n\tgameBoxID\030\013 \001(\005\022\025\n\rgameBoxExpire\030\014 \001(\005"
    "\022\022\n\nserverTime\030\r \001(\005\022\021\n\tdoneGuide\030\016 \001(\005\022"
    "\021\n\tachieveID\030\017 \001(\005\"\037\n\rReq_EnterRoom\022\016\n\006r"
    "oomID\030\001 \002(\005\"\023\n\021Ans_Pro_EnterRoom\"\037\n\rReq_"
    "LeaveRoom\022\016\n\006roomID\030\001 \002(\005\"\023\n\021Ans_Pro_Lea"
    "veRoom\"\"\n\020Req_GetTableList\022\016\n\006roomID\030\001 \002"
    "(\005\"R\n\030Ans_Pro_GetTableListInfo\022&\n\005infos\030"
    "\001 \003(\0132\027.pf.Ans_SimpleTableInfo\022\016\n\006roomID"
    "\030\002 \002(\005\"\236\001\n\023Ans_SimpleTableInfo\022\017\n\007tableI"
    "D\030\002 \002(\005\022\016\n\006propID\030\004 \002(\005\022\024\n\tplayerNum\030\005 \002"
    "(\005:\0010\022\023\n\010standNum\030\006 \002(\005:\0010\022\024\n\tgameState\030"
    "\007 \002(\005:\0010\022%\n\005infos\030\010 \003(\0132\026.pf.Ans_SimpleS"
    "eatInfo\"p\n\022Ans_SimpleSeatInfo\022\021\n\006userID\030"
    "\001 \002(\005:\0010\022\025\n\nreadyState\030\002 \002(\005:\0010\022\020\n\010nickN"
    "ame\030\003 \002(\t\022\016\n\006picUrl\030\004 \002(\t\022\016\n\006seatID\030\005 \002("
    "\005\"W\n\016Req_EnterTable\022\016\n\006roomID\030\001 \002(\005\022\017\n\007t"
    "ableID\030\002 \002(\005\022\021\n\006seatID\030\003 \002(\005:\0010\022\021\n\006inten"
    "t\030\004 \002(\005:\0010\"a\n\024Ans_Pro_OnEnterTable\022\016\n\006ro"
    "omID\030\003 \002(\005\022\017\n\007tableID\030\004 \002(\005\022(\n\007players\030\007"
    " \003(\0132\027.pf.Ans_TablePlayerInfo\"\233\002\n\023Ans_Ta"
    "blePlayerInfo\022\016\n\006seatID\030\001 \001(\005\022\016\n\006userID\030"
    "\002 \001(\005\022\020\n\010nickName\030\003 \001(\t\022\017\n\007headUrl\030\004 \001(\t"
    "\022\022\n\007isAdmin\030\005 \001(\005:\0010\022\016\n\003win\030\006 \001(\005:\0010\022\017\n\004"
    "loss\030\007 \001(\005:\0010\022\020\n\005equal\030\010 \001(\005:\0010\022\016\n\003esc\030\t"
    " \001(\005:\0010\022\017\n\004coin\030\n \001(\005:\0010\022\021\n\006points\030\013 \001(\005"
    ":\0010\022\016\n\003sex\030\014 \001(\005:\0010\022\021\n\tachieveID\030\r \001(\005\022\021"
    "\n\tgameBoxID\030\016 \001(\005\022\020\n\010isLooker\030\017 \001(\005\"B\n\026A"
    "ns_Pro_AddTablePlayer\022(\n\007players\030\001 \002(\0132\027"
    ".pf.Ans_TablePlayerInfo\"-\n\013Req_SitDown\022\016"
    "\n\006roomID\030\001 \002(\005\022\016\n\006seatID\030\003 \002(\005\"7\n\025Ans_Pr"
    "o_NotifySitDown\022\016\n\006userID\030\001 \002(\005\022\016\n\006seatI"
    "D\030\002 \002(\005\"\037\n\rReq_ReadyGame\022\016\n\006roomID\030\001 \002(\005"
    "\"\023\n\021Ans_Pro_ReadyGame\"\035\n\013Req_StandUp\022\016\n\006"
    "roomID\030\001 \002(\005\"\'\n\025Ans_Pro_NotifyStandUp\022\016\n"
    "\006userID\030\001 \002(\005\" \n\016Req_LeaveTable\022\016\n\006roomI"
    "D\030\001 \002(\005\"\024\n\022Ans_Pro_LeaveTable\"(\n\026Ans_Pro"
    "_DelTablePlayer\022\016\n\006userID\030\001 \002(\005\"U\n\013Pro_G"
    "ameMsg\022\016\n\006roomID\030\001 \001(\005\022\017\n\007tableID\030\002 \001(\005\022"
    "\021\n\tgameCmdID\030\003 \002(\005\022\022\n\nparamBytes\030\004 \001(\014\"W"
    "\n\035Ans_Pro_TablePlayerInfoChange\022\016\n\006userI"
    "D\030\001 \002(\005\022&\n\005infos\030\002 \002(\0132\027.pf.Ans_TablePla"
    "yerInfo\"/\n\010ErrorMes\022\021\n\terrorCode\030\001 \002(\005\022\020"
    "\n\010errorMsg\030\002 \002(\t\"4\n\010Req_Test\022\013\n\003uid\030\001 \002("
    "\005\022\016\n\004name\030\002 \002(\t:\000\022\013\n\003buf\030\003 \001(\014\"4\n\010Ans_Te"
    "st\022\013\n\003uid\030\001 \002(\005\022\013\n\003buf\030\002 \001(\014\022\016\n\004name\030\003 \002"
    "(\t:\000", 2364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pf.proto", &protobuf_RegisterTypes);
  Req_Login::default_instance_ = new Req_Login();
  Ans_Pro_Login::default_instance_ = new Ans_Pro_Login();
  Ans_BaseInfo::default_instance_ = new Ans_BaseInfo();
  Ans_GameInfo::default_instance_ = new Ans_GameInfo();
  Req_EnterRoom::default_instance_ = new Req_EnterRoom();
  Ans_Pro_EnterRoom::default_instance_ = new Ans_Pro_EnterRoom();
  Req_LeaveRoom::default_instance_ = new Req_LeaveRoom();
  Ans_Pro_LeaveRoom::default_instance_ = new Ans_Pro_LeaveRoom();
  Req_GetTableList::default_instance_ = new Req_GetTableList();
  Ans_Pro_GetTableListInfo::default_instance_ = new Ans_Pro_GetTableListInfo();
  Ans_SimpleTableInfo::default_instance_ = new Ans_SimpleTableInfo();
  Ans_SimpleSeatInfo::default_instance_ = new Ans_SimpleSeatInfo();
  Req_EnterTable::default_instance_ = new Req_EnterTable();
  Ans_Pro_OnEnterTable::default_instance_ = new Ans_Pro_OnEnterTable();
  Ans_TablePlayerInfo::default_instance_ = new Ans_TablePlayerInfo();
  Ans_Pro_AddTablePlayer::default_instance_ = new Ans_Pro_AddTablePlayer();
  Req_SitDown::default_instance_ = new Req_SitDown();
  Ans_Pro_NotifySitDown::default_instance_ = new Ans_Pro_NotifySitDown();
  Req_ReadyGame::default_instance_ = new Req_ReadyGame();
  Ans_Pro_ReadyGame::default_instance_ = new Ans_Pro_ReadyGame();
  Req_StandUp::default_instance_ = new Req_StandUp();
  Ans_Pro_NotifyStandUp::default_instance_ = new Ans_Pro_NotifyStandUp();
  Req_LeaveTable::default_instance_ = new Req_LeaveTable();
  Ans_Pro_LeaveTable::default_instance_ = new Ans_Pro_LeaveTable();
  Ans_Pro_DelTablePlayer::default_instance_ = new Ans_Pro_DelTablePlayer();
  Pro_GameMsg::default_instance_ = new Pro_GameMsg();
  Ans_Pro_TablePlayerInfoChange::default_instance_ = new Ans_Pro_TablePlayerInfoChange();
  ErrorMes::default_instance_ = new ErrorMes();
  Req_Test::default_instance_ = new Req_Test();
  Ans_Test::default_instance_ = new Ans_Test();
  Req_Login::default_instance_->InitAsDefaultInstance();
  Ans_Pro_Login::default_instance_->InitAsDefaultInstance();
  Ans_BaseInfo::default_instance_->InitAsDefaultInstance();
  Ans_GameInfo::default_instance_->InitAsDefaultInstance();
  Req_EnterRoom::default_instance_->InitAsDefaultInstance();
  Ans_Pro_EnterRoom::default_instance_->InitAsDefaultInstance();
  Req_LeaveRoom::default_instance_->InitAsDefaultInstance();
  Ans_Pro_LeaveRoom::default_instance_->InitAsDefaultInstance();
  Req_GetTableList::default_instance_->InitAsDefaultInstance();
  Ans_Pro_GetTableListInfo::default_instance_->InitAsDefaultInstance();
  Ans_SimpleTableInfo::default_instance_->InitAsDefaultInstance();
  Ans_SimpleSeatInfo::default_instance_->InitAsDefaultInstance();
  Req_EnterTable::default_instance_->InitAsDefaultInstance();
  Ans_Pro_OnEnterTable::default_instance_->InitAsDefaultInstance();
  Ans_TablePlayerInfo::default_instance_->InitAsDefaultInstance();
  Ans_Pro_AddTablePlayer::default_instance_->InitAsDefaultInstance();
  Req_SitDown::default_instance_->InitAsDefaultInstance();
  Ans_Pro_NotifySitDown::default_instance_->InitAsDefaultInstance();
  Req_ReadyGame::default_instance_->InitAsDefaultInstance();
  Ans_Pro_ReadyGame::default_instance_->InitAsDefaultInstance();
  Req_StandUp::default_instance_->InitAsDefaultInstance();
  Ans_Pro_NotifyStandUp::default_instance_->InitAsDefaultInstance();
  Req_LeaveTable::default_instance_->InitAsDefaultInstance();
  Ans_Pro_LeaveTable::default_instance_->InitAsDefaultInstance();
  Ans_Pro_DelTablePlayer::default_instance_->InitAsDefaultInstance();
  Pro_GameMsg::default_instance_->InitAsDefaultInstance();
  Ans_Pro_TablePlayerInfoChange::default_instance_->InitAsDefaultInstance();
  ErrorMes::default_instance_->InitAsDefaultInstance();
  Req_Test::default_instance_->InitAsDefaultInstance();
  Ans_Test::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pf_2eproto {
  StaticDescriptorInitializer_pf_2eproto() {
    protobuf_AddDesc_pf_2eproto();
  }
} static_descriptor_initializer_pf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Req_Login::kUserIDFieldNumber;
const int Req_Login::kExpireTimeFieldNumber;
const int Req_Login::kCertStrFieldNumber;
const int Req_Login::kIsNewUserFieldNumber;
const int Req_Login::kNickNameFieldNumber;
const int Req_Login::kPicUrlFieldNumber;
const int Req_Login::kPfFieldNumber;
const int Req_Login::kSexFieldNumber;
const int Req_Login::kGameIDFieldNumber;
#endif  // !_MSC_VER

Req_Login::Req_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_Login::InitAsDefaultInstance() {
}

Req_Login::Req_Login(const Req_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_Login::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  expiretime_ = 0;
  certstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isnewuser_ = false;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_Login::~Req_Login() {
  SharedDtor();
}

void Req_Login::SharedDtor() {
  if (certstr_ != &::google::protobuf::internal::kEmptyString) {
    delete certstr_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (this != default_instance_) {
  }
}

void Req_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_Login_descriptor_;
}

const Req_Login& Req_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_Login* Req_Login::default_instance_ = NULL;

Req_Login* Req_Login::New() const {
  return new Req_Login;
}

void Req_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    expiretime_ = 0;
    if (has_certstr()) {
      if (certstr_ != &::google::protobuf::internal::kEmptyString) {
        certstr_->clear();
      }
    }
    isnewuser_ = false;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_picurl()) {
      if (picurl_ != &::google::protobuf::internal::kEmptyString) {
        picurl_->clear();
      }
    }
    if (has_pf()) {
      if (pf_ != &::google::protobuf::internal::kEmptyString) {
        pf_->clear();
      }
    }
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expireTime;
        break;
      }

      // required int32 expireTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_certStr;
        break;
      }

      // required string certStr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_certStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->certstr().data(), this->certstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isNewUser;
        break;
      }

      // required bool isNewUser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNewUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewuser_)));
          set_has_isnewuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickName;
        break;
      }

      // required string nickName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_picUrl;
        break;
      }

      // required string picUrl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picurl().data(), this->picurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pf;
        break;
      }

      // optional string pf = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pf().data(), this->pf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional int32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gameID;
        break;
      }

      // required int32 gameID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 expireTime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expiretime(), output);
  }

  // required string certStr = 3;
  if (has_certstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->certstr().data(), this->certstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->certstr(), output);
  }

  // required bool isNewUser = 4;
  if (has_isnewuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isnewuser(), output);
  }

  // required string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // required string picUrl = 6;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->picurl(), output);
  }

  // optional string pf = 7;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->pf(), output);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }

  // required int32 gameID = 9;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 expireTime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expiretime(), target);
  }

  // required string certStr = 3;
  if (has_certstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->certstr().data(), this->certstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->certstr(), target);
  }

  // required bool isNewUser = 4;
  if (has_isnewuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isnewuser(), target);
  }

  // required string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // required string picUrl = 6;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->picurl(), target);
  }

  // optional string pf = 7;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pf(), target);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }

  // required int32 gameID = 9;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 expireTime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expiretime());
    }

    // required string certStr = 3;
    if (has_certstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->certstr());
    }

    // required bool isNewUser = 4;
    if (has_isnewuser()) {
      total_size += 1 + 1;
    }

    // required string nickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string picUrl = 6;
    if (has_picurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picurl());
    }

    // optional string pf = 7;
    if (has_pf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pf());
    }

    // optional int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 gameID = 9;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_Login::MergeFrom(const Req_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_certstr()) {
      set_certstr(from.certstr());
    }
    if (from.has_isnewuser()) {
      set_isnewuser(from.isnewuser());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_picurl()) {
      set_picurl(from.picurl());
    }
    if (from.has_pf()) {
      set_pf(from.pf());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_Login::CopyFrom(const Req_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;

  return true;
}

void Req_Login::Swap(Req_Login* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(certstr_, other->certstr_);
    std::swap(isnewuser_, other->isnewuser_);
    std::swap(nickname_, other->nickname_);
    std::swap(picurl_, other->picurl_);
    std::swap(pf_, other->pf_);
    std::swap(sex_, other->sex_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_Login_descriptor_;
  metadata.reflection = Req_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Pro_Login::kBaseInfoFieldNumber;
const int Ans_Pro_Login::kGameInfoFieldNumber;
#endif  // !_MSC_VER

Ans_Pro_Login::Ans_Pro_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_Login::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::pf::Ans_BaseInfo*>(&::pf::Ans_BaseInfo::default_instance());
  gameinfo_ = const_cast< ::pf::Ans_GameInfo*>(&::pf::Ans_GameInfo::default_instance());
}

Ans_Pro_Login::Ans_Pro_Login(const Ans_Pro_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_Login::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  gameinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_Login::~Ans_Pro_Login() {
  SharedDtor();
}

void Ans_Pro_Login::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete gameinfo_;
  }
}

void Ans_Pro_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_Login_descriptor_;
}

const Ans_Pro_Login& Ans_Pro_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_Login* Ans_Pro_Login::default_instance_ = NULL;

Ans_Pro_Login* Ans_Pro_Login::New() const {
  return new Ans_Pro_Login;
}

void Ans_Pro_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::pf::Ans_BaseInfo::Clear();
    }
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::pf::Ans_GameInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pf.Ans_BaseInfo baseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameInfo;
        break;
      }

      // required .pf.Ans_GameInfo gameInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Pro_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pf.Ans_BaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // required .pf.Ans_GameInfo gameInfo = 2;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gameinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pf.Ans_BaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // required .pf.Ans_GameInfo gameInfo = 2;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gameinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pf.Ans_BaseInfo baseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // required .pf.Ans_GameInfo gameInfo = 2;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_Login::MergeFrom(const Ans_Pro_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::pf::Ans_BaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::pf::Ans_GameInfo::MergeFrom(from.gameinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_Login::CopyFrom(const Ans_Pro_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  return true;
}

void Ans_Pro_Login::Swap(Ans_Pro_Login* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_Login_descriptor_;
  metadata.reflection = Ans_Pro_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_BaseInfo::kNickNameFieldNumber;
const int Ans_BaseInfo::kPicUrlFieldNumber;
const int Ans_BaseInfo::kLoginNumFieldNumber;
const int Ans_BaseInfo::kLoginIPFieldNumber;
const int Ans_BaseInfo::kLastLoginTimeFieldNumber;
const int Ans_BaseInfo::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

Ans_BaseInfo::Ans_BaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_BaseInfo::InitAsDefaultInstance() {
}

Ans_BaseInfo::Ans_BaseInfo(const Ans_BaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_BaseInfo::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginnum_ = 0;
  loginip_ = 0;
  lastlogintime_ = 0;
  createtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_BaseInfo::~Ans_BaseInfo() {
  SharedDtor();
}

void Ans_BaseInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (this != default_instance_) {
  }
}

void Ans_BaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_BaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_BaseInfo_descriptor_;
}

const Ans_BaseInfo& Ans_BaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_BaseInfo* Ans_BaseInfo::default_instance_ = NULL;

Ans_BaseInfo* Ans_BaseInfo::New() const {
  return new Ans_BaseInfo;
}

void Ans_BaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_picurl()) {
      if (picurl_ != &::google::protobuf::internal::kEmptyString) {
        picurl_->clear();
      }
    }
    loginnum_ = 0;
    loginip_ = 0;
    lastlogintime_ = 0;
    createtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_BaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_picUrl;
        break;
      }

      // required string picUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picurl().data(), this->picurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginNum;
        break;
      }

      // required int32 loginNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginnum_)));
          set_has_loginnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_loginIP;
        break;
      }

      // required int32 loginIP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginip_)));
          set_has_loginip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastLoginTime;
        break;
      }

      // required int32 lastLoginTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_createTime;
        break;
      }

      // required int32 createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_BaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required string picUrl = 3;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->picurl(), output);
  }

  // required int32 loginNum = 4;
  if (has_loginnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loginnum(), output);
  }

  // required int32 loginIP = 5;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->loginip(), output);
  }

  // required int32 lastLoginTime = 6;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastlogintime(), output);
  }

  // required int32 createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_BaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required string picUrl = 3;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->picurl(), target);
  }

  // required int32 loginNum = 4;
  if (has_loginnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loginnum(), target);
  }

  // required int32 loginIP = 5;
  if (has_loginip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->loginip(), target);
  }

  // required int32 lastLoginTime = 6;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastlogintime(), target);
  }

  // required int32 createTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_BaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string picUrl = 3;
    if (has_picurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picurl());
    }

    // required int32 loginNum = 4;
    if (has_loginnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginnum());
    }

    // required int32 loginIP = 5;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginip());
    }

    // required int32 lastLoginTime = 6;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogintime());
    }

    // required int32 createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_BaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_BaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_BaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_BaseInfo::MergeFrom(const Ans_BaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_picurl()) {
      set_picurl(from.picurl());
    }
    if (from.has_loginnum()) {
      set_loginnum(from.loginnum());
    }
    if (from.has_loginip()) {
      set_loginip(from.loginip());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_BaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_BaseInfo::CopyFrom(const Ans_BaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_BaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Ans_BaseInfo::Swap(Ans_BaseInfo* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(picurl_, other->picurl_);
    std::swap(loginnum_, other->loginnum_);
    std::swap(loginip_, other->loginip_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_BaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_BaseInfo_descriptor_;
  metadata.reflection = Ans_BaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_GameInfo::kCoinFieldNumber;
const int Ans_GameInfo::kPointsFieldNumber;
const int Ans_GameInfo::kWinFieldNumber;
const int Ans_GameInfo::kLossFieldNumber;
const int Ans_GameInfo::kEqualFieldNumber;
const int Ans_GameInfo::kEscFieldNumber;
const int Ans_GameInfo::kOrgFieldNumber;
const int Ans_GameInfo::kTitleFieldNumber;
const int Ans_GameInfo::kOrgStateFieldNumber;
const int Ans_GameInfo::kGameTimeFieldNumber;
const int Ans_GameInfo::kGameBoxIDFieldNumber;
const int Ans_GameInfo::kGameBoxExpireFieldNumber;
const int Ans_GameInfo::kServerTimeFieldNumber;
const int Ans_GameInfo::kDoneGuideFieldNumber;
const int Ans_GameInfo::kAchieveIDFieldNumber;
#endif  // !_MSC_VER

Ans_GameInfo::Ans_GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_GameInfo::InitAsDefaultInstance() {
}

Ans_GameInfo::Ans_GameInfo(const Ans_GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_GameInfo::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0;
  points_ = 0;
  win_ = 0;
  loss_ = 0;
  equal_ = 0;
  esc_ = 0;
  org_ = 0;
  title_ = 0;
  orgstate_ = 0;
  gametime_ = 0;
  gameboxid_ = 0;
  gameboxexpire_ = 0;
  servertime_ = 0;
  doneguide_ = 0;
  achieveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_GameInfo::~Ans_GameInfo() {
  SharedDtor();
}

void Ans_GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_GameInfo_descriptor_;
}

const Ans_GameInfo& Ans_GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_GameInfo* Ans_GameInfo::default_instance_ = NULL;

Ans_GameInfo* Ans_GameInfo::New() const {
  return new Ans_GameInfo;
}

void Ans_GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0;
    points_ = 0;
    win_ = 0;
    loss_ = 0;
    equal_ = 0;
    esc_ = 0;
    org_ = 0;
    title_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    orgstate_ = 0;
    gametime_ = 0;
    gameboxid_ = 0;
    gameboxexpire_ = 0;
    servertime_ = 0;
    doneguide_ = 0;
    achieveid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // required int32 points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }

      // required int32 win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loss;
        break;
      }

      // required int32 loss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loss_)));
          set_has_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equal;
        break;
      }

      // required int32 equal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equal_)));
          set_has_equal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_esc;
        break;
      }

      // required int32 esc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esc_)));
          set_has_esc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_org;
        break;
      }

      // required int32 org = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &org_)));
          set_has_org();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_title;
        break;
      }

      // required int32 title = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_orgState;
        break;
      }

      // required int32 orgState = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orgState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orgstate_)));
          set_has_orgstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gameTime;
        break;
      }

      // required int32 gameTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gameBoxID;
        break;
      }

      // optional int32 gameBoxID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameBoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameboxid_)));
          set_has_gameboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gameBoxExpire;
        break;
      }

      // optional int32 gameBoxExpire = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameBoxExpire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameboxexpire_)));
          set_has_gameboxexpire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_serverTime;
        break;
      }

      // optional int32 serverTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_doneGuide;
        break;
      }

      // optional int32 doneGuide = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doneGuide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doneguide_)));
          set_has_doneguide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_achieveID;
        break;
      }

      // optional int32 achieveID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieveID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieveid_)));
          set_has_achieveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coin(), output);
  }

  // required int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // required int32 win = 3;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win(), output);
  }

  // required int32 loss = 4;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loss(), output);
  }

  // required int32 equal = 5;
  if (has_equal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->equal(), output);
  }

  // required int32 esc = 6;
  if (has_esc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->esc(), output);
  }

  // required int32 org = 7;
  if (has_org()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->org(), output);
  }

  // required int32 title = 8;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->title(), output);
  }

  // required int32 orgState = 9;
  if (has_orgstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->orgstate(), output);
  }

  // required int32 gameTime = 10;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gametime(), output);
  }

  // optional int32 gameBoxID = 11;
  if (has_gameboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gameboxid(), output);
  }

  // optional int32 gameBoxExpire = 12;
  if (has_gameboxexpire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gameboxexpire(), output);
  }

  // optional int32 serverTime = 13;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->servertime(), output);
  }

  // optional int32 doneGuide = 14;
  if (has_doneguide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->doneguide(), output);
  }

  // optional int32 achieveID = 15;
  if (has_achieveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->achieveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coin(), target);
  }

  // required int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // required int32 win = 3;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win(), target);
  }

  // required int32 loss = 4;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loss(), target);
  }

  // required int32 equal = 5;
  if (has_equal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->equal(), target);
  }

  // required int32 esc = 6;
  if (has_esc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->esc(), target);
  }

  // required int32 org = 7;
  if (has_org()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->org(), target);
  }

  // required int32 title = 8;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->title(), target);
  }

  // required int32 orgState = 9;
  if (has_orgstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->orgstate(), target);
  }

  // required int32 gameTime = 10;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gametime(), target);
  }

  // optional int32 gameBoxID = 11;
  if (has_gameboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gameboxid(), target);
  }

  // optional int32 gameBoxExpire = 12;
  if (has_gameboxexpire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gameboxexpire(), target);
  }

  // optional int32 serverTime = 13;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->servertime(), target);
  }

  // optional int32 doneGuide = 14;
  if (has_doneguide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->doneguide(), target);
  }

  // optional int32 achieveID = 15;
  if (has_achieveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->achieveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // required int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // required int32 win = 3;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // required int32 loss = 4;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loss());
    }

    // required int32 equal = 5;
    if (has_equal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equal());
    }

    // required int32 esc = 6;
    if (has_esc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esc());
    }

    // required int32 org = 7;
    if (has_org()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->org());
    }

    // required int32 title = 8;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 orgState = 9;
    if (has_orgstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orgstate());
    }

    // required int32 gameTime = 10;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametime());
    }

    // optional int32 gameBoxID = 11;
    if (has_gameboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameboxid());
    }

    // optional int32 gameBoxExpire = 12;
    if (has_gameboxexpire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameboxexpire());
    }

    // optional int32 serverTime = 13;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

    // optional int32 doneGuide = 14;
    if (has_doneguide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doneguide());
    }

    // optional int32 achieveID = 15;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_GameInfo::MergeFrom(const Ans_GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
    if (from.has_equal()) {
      set_equal(from.equal());
    }
    if (from.has_esc()) {
      set_esc(from.esc());
    }
    if (from.has_org()) {
      set_org(from.org());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_orgstate()) {
      set_orgstate(from.orgstate());
    }
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
    if (from.has_gameboxid()) {
      set_gameboxid(from.gameboxid());
    }
    if (from.has_gameboxexpire()) {
      set_gameboxexpire(from.gameboxexpire());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_doneguide()) {
      set_doneguide(from.doneguide());
    }
    if (from.has_achieveid()) {
      set_achieveid(from.achieveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_GameInfo::CopyFrom(const Ans_GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_GameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Ans_GameInfo::Swap(Ans_GameInfo* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(points_, other->points_);
    std::swap(win_, other->win_);
    std::swap(loss_, other->loss_);
    std::swap(equal_, other->equal_);
    std::swap(esc_, other->esc_);
    std::swap(org_, other->org_);
    std::swap(title_, other->title_);
    std::swap(orgstate_, other->orgstate_);
    std::swap(gametime_, other->gametime_);
    std::swap(gameboxid_, other->gameboxid_);
    std::swap(gameboxexpire_, other->gameboxexpire_);
    std::swap(servertime_, other->servertime_);
    std::swap(doneguide_, other->doneguide_);
    std::swap(achieveid_, other->achieveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_GameInfo_descriptor_;
  metadata.reflection = Ans_GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_EnterRoom::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Req_EnterRoom::Req_EnterRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_EnterRoom::InitAsDefaultInstance() {
}

Req_EnterRoom::Req_EnterRoom(const Req_EnterRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_EnterRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_EnterRoom::~Req_EnterRoom() {
  SharedDtor();
}

void Req_EnterRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Req_EnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_EnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_EnterRoom_descriptor_;
}

const Req_EnterRoom& Req_EnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_EnterRoom* Req_EnterRoom::default_instance_ = NULL;

Req_EnterRoom* Req_EnterRoom::New() const {
  return new Req_EnterRoom;
}

void Req_EnterRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_EnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_EnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_EnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_EnterRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_EnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_EnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_EnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_EnterRoom::MergeFrom(const Req_EnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_EnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_EnterRoom::CopyFrom(const Req_EnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_EnterRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Req_EnterRoom::Swap(Req_EnterRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_EnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_EnterRoom_descriptor_;
  metadata.reflection = Req_EnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ans_Pro_EnterRoom::Ans_Pro_EnterRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_EnterRoom::InitAsDefaultInstance() {
}

Ans_Pro_EnterRoom::Ans_Pro_EnterRoom(const Ans_Pro_EnterRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_EnterRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_EnterRoom::~Ans_Pro_EnterRoom() {
  SharedDtor();
}

void Ans_Pro_EnterRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_EnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_EnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_EnterRoom_descriptor_;
}

const Ans_Pro_EnterRoom& Ans_Pro_EnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_EnterRoom* Ans_Pro_EnterRoom::default_instance_ = NULL;

Ans_Pro_EnterRoom* Ans_Pro_EnterRoom::New() const {
  return new Ans_Pro_EnterRoom;
}

void Ans_Pro_EnterRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_EnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ans_Pro_EnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_EnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_EnterRoom::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_EnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_EnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_EnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_EnterRoom::MergeFrom(const Ans_Pro_EnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_EnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_EnterRoom::CopyFrom(const Ans_Pro_EnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_EnterRoom::IsInitialized() const {

  return true;
}

void Ans_Pro_EnterRoom::Swap(Ans_Pro_EnterRoom* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_EnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_EnterRoom_descriptor_;
  metadata.reflection = Ans_Pro_EnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_LeaveRoom::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Req_LeaveRoom::Req_LeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_LeaveRoom::InitAsDefaultInstance() {
}

Req_LeaveRoom::Req_LeaveRoom(const Req_LeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_LeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_LeaveRoom::~Req_LeaveRoom() {
  SharedDtor();
}

void Req_LeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Req_LeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_LeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_LeaveRoom_descriptor_;
}

const Req_LeaveRoom& Req_LeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_LeaveRoom* Req_LeaveRoom::default_instance_ = NULL;

Req_LeaveRoom* Req_LeaveRoom::New() const {
  return new Req_LeaveRoom;
}

void Req_LeaveRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_LeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_LeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_LeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_LeaveRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_LeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_LeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_LeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_LeaveRoom::MergeFrom(const Req_LeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_LeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_LeaveRoom::CopyFrom(const Req_LeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_LeaveRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Req_LeaveRoom::Swap(Req_LeaveRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_LeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_LeaveRoom_descriptor_;
  metadata.reflection = Req_LeaveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ans_Pro_LeaveRoom::Ans_Pro_LeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_LeaveRoom::InitAsDefaultInstance() {
}

Ans_Pro_LeaveRoom::Ans_Pro_LeaveRoom(const Ans_Pro_LeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_LeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_LeaveRoom::~Ans_Pro_LeaveRoom() {
  SharedDtor();
}

void Ans_Pro_LeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_LeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_LeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_LeaveRoom_descriptor_;
}

const Ans_Pro_LeaveRoom& Ans_Pro_LeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_LeaveRoom* Ans_Pro_LeaveRoom::default_instance_ = NULL;

Ans_Pro_LeaveRoom* Ans_Pro_LeaveRoom::New() const {
  return new Ans_Pro_LeaveRoom;
}

void Ans_Pro_LeaveRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_LeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ans_Pro_LeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_LeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_LeaveRoom::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_LeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_LeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_LeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_LeaveRoom::MergeFrom(const Ans_Pro_LeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_LeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_LeaveRoom::CopyFrom(const Ans_Pro_LeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_LeaveRoom::IsInitialized() const {

  return true;
}

void Ans_Pro_LeaveRoom::Swap(Ans_Pro_LeaveRoom* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_LeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_LeaveRoom_descriptor_;
  metadata.reflection = Ans_Pro_LeaveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_GetTableList::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Req_GetTableList::Req_GetTableList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_GetTableList::InitAsDefaultInstance() {
}

Req_GetTableList::Req_GetTableList(const Req_GetTableList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_GetTableList::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_GetTableList::~Req_GetTableList() {
  SharedDtor();
}

void Req_GetTableList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Req_GetTableList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_GetTableList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_GetTableList_descriptor_;
}

const Req_GetTableList& Req_GetTableList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_GetTableList* Req_GetTableList::default_instance_ = NULL;

Req_GetTableList* Req_GetTableList::New() const {
  return new Req_GetTableList;
}

void Req_GetTableList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_GetTableList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_GetTableList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_GetTableList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_GetTableList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_GetTableList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_GetTableList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_GetTableList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_GetTableList::MergeFrom(const Req_GetTableList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_GetTableList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_GetTableList::CopyFrom(const Req_GetTableList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_GetTableList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Req_GetTableList::Swap(Req_GetTableList* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_GetTableList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_GetTableList_descriptor_;
  metadata.reflection = Req_GetTableList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Pro_GetTableListInfo::kInfosFieldNumber;
const int Ans_Pro_GetTableListInfo::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Ans_Pro_GetTableListInfo::Ans_Pro_GetTableListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_GetTableListInfo::InitAsDefaultInstance() {
}

Ans_Pro_GetTableListInfo::Ans_Pro_GetTableListInfo(const Ans_Pro_GetTableListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_GetTableListInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_GetTableListInfo::~Ans_Pro_GetTableListInfo() {
  SharedDtor();
}

void Ans_Pro_GetTableListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_GetTableListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_GetTableListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_GetTableListInfo_descriptor_;
}

const Ans_Pro_GetTableListInfo& Ans_Pro_GetTableListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_GetTableListInfo* Ans_Pro_GetTableListInfo::default_instance_ = NULL;

Ans_Pro_GetTableListInfo* Ans_Pro_GetTableListInfo::New() const {
  return new Ans_Pro_GetTableListInfo;
}

void Ans_Pro_GetTableListInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    roomid_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_GetTableListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pf.Ans_SimpleTableInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_roomID;
        break;
      }

      // required int32 roomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Pro_GetTableListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pf.Ans_SimpleTableInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // required int32 roomID = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_GetTableListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pf.Ans_SimpleTableInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // required int32 roomID = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_GetTableListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 roomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  // repeated .pf.Ans_SimpleTableInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_GetTableListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_GetTableListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_GetTableListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_GetTableListInfo::MergeFrom(const Ans_Pro_GetTableListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_GetTableListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_GetTableListInfo::CopyFrom(const Ans_Pro_GetTableListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_GetTableListInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void Ans_Pro_GetTableListInfo::Swap(Ans_Pro_GetTableListInfo* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_GetTableListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_GetTableListInfo_descriptor_;
  metadata.reflection = Ans_Pro_GetTableListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_SimpleTableInfo::kTableIDFieldNumber;
const int Ans_SimpleTableInfo::kPropIDFieldNumber;
const int Ans_SimpleTableInfo::kPlayerNumFieldNumber;
const int Ans_SimpleTableInfo::kStandNumFieldNumber;
const int Ans_SimpleTableInfo::kGameStateFieldNumber;
const int Ans_SimpleTableInfo::kInfosFieldNumber;
#endif  // !_MSC_VER

Ans_SimpleTableInfo::Ans_SimpleTableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_SimpleTableInfo::InitAsDefaultInstance() {
}

Ans_SimpleTableInfo::Ans_SimpleTableInfo(const Ans_SimpleTableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_SimpleTableInfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  propid_ = 0;
  playernum_ = 0;
  standnum_ = 0;
  gamestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_SimpleTableInfo::~Ans_SimpleTableInfo() {
  SharedDtor();
}

void Ans_SimpleTableInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_SimpleTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_SimpleTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_SimpleTableInfo_descriptor_;
}

const Ans_SimpleTableInfo& Ans_SimpleTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_SimpleTableInfo* Ans_SimpleTableInfo::default_instance_ = NULL;

Ans_SimpleTableInfo* Ans_SimpleTableInfo::New() const {
  return new Ans_SimpleTableInfo;
}

void Ans_SimpleTableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    propid_ = 0;
    playernum_ = 0;
    standnum_ = 0;
    gamestate_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_SimpleTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_propID;
        break;
      }

      // required int32 propID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerNum;
        break;
      }

      // required int32 playerNum = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_standNum;
        break;
      }

      // required int32 standNum = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &standnum_)));
          set_has_standnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gameState;
        break;
      }

      // required int32 gameState = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamestate_)));
          set_has_gamestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_infos;
        break;
      }

      // repeated .pf.Ans_SimpleSeatInfo infos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_SimpleTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableID = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required int32 propID = 4;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->propid(), output);
  }

  // required int32 playerNum = 5 [default = 0];
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playernum(), output);
  }

  // required int32 standNum = 6 [default = 0];
  if (has_standnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->standnum(), output);
  }

  // required int32 gameState = 7 [default = 0];
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gamestate(), output);
  }

  // repeated .pf.Ans_SimpleSeatInfo infos = 8;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_SimpleTableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tableID = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required int32 propID = 4;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->propid(), target);
  }

  // required int32 playerNum = 5 [default = 0];
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playernum(), target);
  }

  // required int32 standNum = 6 [default = 0];
  if (has_standnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->standnum(), target);
  }

  // required int32 gameState = 7 [default = 0];
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gamestate(), target);
  }

  // repeated .pf.Ans_SimpleSeatInfo infos = 8;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_SimpleTableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableID = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 propID = 4;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

    // required int32 playerNum = 5 [default = 0];
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

    // required int32 standNum = 6 [default = 0];
    if (has_standnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->standnum());
    }

    // required int32 gameState = 7 [default = 0];
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamestate());
    }

  }
  // repeated .pf.Ans_SimpleSeatInfo infos = 8;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_SimpleTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_SimpleTableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_SimpleTableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_SimpleTableInfo::MergeFrom(const Ans_SimpleTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
    if (from.has_standnum()) {
      set_standnum(from.standnum());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_SimpleTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_SimpleTableInfo::CopyFrom(const Ans_SimpleTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_SimpleTableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void Ans_SimpleTableInfo::Swap(Ans_SimpleTableInfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(propid_, other->propid_);
    std::swap(playernum_, other->playernum_);
    std::swap(standnum_, other->standnum_);
    std::swap(gamestate_, other->gamestate_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_SimpleTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_SimpleTableInfo_descriptor_;
  metadata.reflection = Ans_SimpleTableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_SimpleSeatInfo::kUserIDFieldNumber;
const int Ans_SimpleSeatInfo::kReadyStateFieldNumber;
const int Ans_SimpleSeatInfo::kNickNameFieldNumber;
const int Ans_SimpleSeatInfo::kPicUrlFieldNumber;
const int Ans_SimpleSeatInfo::kSeatIDFieldNumber;
#endif  // !_MSC_VER

Ans_SimpleSeatInfo::Ans_SimpleSeatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_SimpleSeatInfo::InitAsDefaultInstance() {
}

Ans_SimpleSeatInfo::Ans_SimpleSeatInfo(const Ans_SimpleSeatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_SimpleSeatInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  readystate_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_SimpleSeatInfo::~Ans_SimpleSeatInfo() {
  SharedDtor();
}

void Ans_SimpleSeatInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (this != default_instance_) {
  }
}

void Ans_SimpleSeatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_SimpleSeatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_SimpleSeatInfo_descriptor_;
}

const Ans_SimpleSeatInfo& Ans_SimpleSeatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_SimpleSeatInfo* Ans_SimpleSeatInfo::default_instance_ = NULL;

Ans_SimpleSeatInfo* Ans_SimpleSeatInfo::New() const {
  return new Ans_SimpleSeatInfo;
}

void Ans_SimpleSeatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    readystate_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_picurl()) {
      if (picurl_ != &::google::protobuf::internal::kEmptyString) {
        picurl_->clear();
      }
    }
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_SimpleSeatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_readyState;
        break;
      }

      // required int32 readyState = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readyState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readystate_)));
          set_has_readystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }

      // required string nickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_picUrl;
        break;
      }

      // required string picUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picurl().data(), this->picurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seatID;
        break;
      }

      // required int32 seatID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_SimpleSeatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 readyState = 2 [default = 0];
  if (has_readystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->readystate(), output);
  }

  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // required string picUrl = 4;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->picurl(), output);
  }

  // required int32 seatID = 5;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_SimpleSeatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 readyState = 2 [default = 0];
  if (has_readystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->readystate(), target);
  }

  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // required string picUrl = 4;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->picurl(), target);
  }

  // required int32 seatID = 5;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_SimpleSeatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 readyState = 2 [default = 0];
    if (has_readystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->readystate());
    }

    // required string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string picUrl = 4;
    if (has_picurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picurl());
    }

    // required int32 seatID = 5;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_SimpleSeatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_SimpleSeatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_SimpleSeatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_SimpleSeatInfo::MergeFrom(const Ans_SimpleSeatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_readystate()) {
      set_readystate(from.readystate());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_picurl()) {
      set_picurl(from.picurl());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_SimpleSeatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_SimpleSeatInfo::CopyFrom(const Ans_SimpleSeatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_SimpleSeatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Ans_SimpleSeatInfo::Swap(Ans_SimpleSeatInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(readystate_, other->readystate_);
    std::swap(nickname_, other->nickname_);
    std::swap(picurl_, other->picurl_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_SimpleSeatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_SimpleSeatInfo_descriptor_;
  metadata.reflection = Ans_SimpleSeatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_EnterTable::kRoomIDFieldNumber;
const int Req_EnterTable::kTableIDFieldNumber;
const int Req_EnterTable::kSeatIDFieldNumber;
const int Req_EnterTable::kIntentFieldNumber;
#endif  // !_MSC_VER

Req_EnterTable::Req_EnterTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_EnterTable::InitAsDefaultInstance() {
}

Req_EnterTable::Req_EnterTable(const Req_EnterTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_EnterTable::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  tableid_ = 0;
  seatid_ = 0;
  intent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_EnterTable::~Req_EnterTable() {
  SharedDtor();
}

void Req_EnterTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Req_EnterTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_EnterTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_EnterTable_descriptor_;
}

const Req_EnterTable& Req_EnterTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_EnterTable* Req_EnterTable::default_instance_ = NULL;

Req_EnterTable* Req_EnterTable::New() const {
  return new Req_EnterTable;
}

void Req_EnterTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    tableid_ = 0;
    seatid_ = 0;
    intent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_EnterTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableID;
        break;
      }

      // required int32 tableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seatID;
        break;
      }

      // required int32 seatID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intent;
        break;
      }

      // required int32 intent = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intent_)));
          set_has_intent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_EnterTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 tableID = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required int32 seatID = 3 [default = 0];
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatid(), output);
  }

  // required int32 intent = 4 [default = 0];
  if (has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->intent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_EnterTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 tableID = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required int32 seatID = 3 [default = 0];
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatid(), target);
  }

  // required int32 intent = 4 [default = 0];
  if (has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->intent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_EnterTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 tableID = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 seatID = 3 [default = 0];
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 intent = 4 [default = 0];
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_EnterTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_EnterTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_EnterTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_EnterTable::MergeFrom(const Req_EnterTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_intent()) {
      set_intent(from.intent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_EnterTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_EnterTable::CopyFrom(const Req_EnterTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_EnterTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Req_EnterTable::Swap(Req_EnterTable* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(tableid_, other->tableid_);
    std::swap(seatid_, other->seatid_);
    std::swap(intent_, other->intent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_EnterTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_EnterTable_descriptor_;
  metadata.reflection = Req_EnterTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Pro_OnEnterTable::kRoomIDFieldNumber;
const int Ans_Pro_OnEnterTable::kTableIDFieldNumber;
const int Ans_Pro_OnEnterTable::kPlayersFieldNumber;
#endif  // !_MSC_VER

Ans_Pro_OnEnterTable::Ans_Pro_OnEnterTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_OnEnterTable::InitAsDefaultInstance() {
}

Ans_Pro_OnEnterTable::Ans_Pro_OnEnterTable(const Ans_Pro_OnEnterTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_OnEnterTable::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_OnEnterTable::~Ans_Pro_OnEnterTable() {
  SharedDtor();
}

void Ans_Pro_OnEnterTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_OnEnterTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_OnEnterTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_OnEnterTable_descriptor_;
}

const Ans_Pro_OnEnterTable& Ans_Pro_OnEnterTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_OnEnterTable* Ans_Pro_OnEnterTable::default_instance_ = NULL;

Ans_Pro_OnEnterTable* Ans_Pro_OnEnterTable::New() const {
  return new Ans_Pro_OnEnterTable;
}

void Ans_Pro_OnEnterTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    tableid_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_OnEnterTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tableID;
        break;
      }

      // required int32 tableID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_players;
        break;
      }

      // repeated .pf.Ans_TablePlayerInfo players = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Pro_OnEnterTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // required int32 tableID = 4;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tableid(), output);
  }

  // repeated .pf.Ans_TablePlayerInfo players = 7;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_OnEnterTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // required int32 tableID = 4;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tableid(), target);
  }

  // repeated .pf.Ans_TablePlayerInfo players = 7;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_OnEnterTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 tableID = 4;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  // repeated .pf.Ans_TablePlayerInfo players = 7;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_OnEnterTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_OnEnterTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_OnEnterTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_OnEnterTable::MergeFrom(const Ans_Pro_OnEnterTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_OnEnterTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_OnEnterTable::CopyFrom(const Ans_Pro_OnEnterTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_OnEnterTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ans_Pro_OnEnterTable::Swap(Ans_Pro_OnEnterTable* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(tableid_, other->tableid_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_OnEnterTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_OnEnterTable_descriptor_;
  metadata.reflection = Ans_Pro_OnEnterTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_TablePlayerInfo::kSeatIDFieldNumber;
const int Ans_TablePlayerInfo::kUserIDFieldNumber;
const int Ans_TablePlayerInfo::kNickNameFieldNumber;
const int Ans_TablePlayerInfo::kHeadUrlFieldNumber;
const int Ans_TablePlayerInfo::kIsAdminFieldNumber;
const int Ans_TablePlayerInfo::kWinFieldNumber;
const int Ans_TablePlayerInfo::kLossFieldNumber;
const int Ans_TablePlayerInfo::kEqualFieldNumber;
const int Ans_TablePlayerInfo::kEscFieldNumber;
const int Ans_TablePlayerInfo::kCoinFieldNumber;
const int Ans_TablePlayerInfo::kPointsFieldNumber;
const int Ans_TablePlayerInfo::kSexFieldNumber;
const int Ans_TablePlayerInfo::kAchieveIDFieldNumber;
const int Ans_TablePlayerInfo::kGameBoxIDFieldNumber;
const int Ans_TablePlayerInfo::kIsLookerFieldNumber;
#endif  // !_MSC_VER

Ans_TablePlayerInfo::Ans_TablePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_TablePlayerInfo::InitAsDefaultInstance() {
}

Ans_TablePlayerInfo::Ans_TablePlayerInfo(const Ans_TablePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_TablePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  userid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isadmin_ = 0;
  win_ = 0;
  loss_ = 0;
  equal_ = 0;
  esc_ = 0;
  coin_ = 0;
  points_ = 0;
  sex_ = 0;
  achieveid_ = 0;
  gameboxid_ = 0;
  islooker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_TablePlayerInfo::~Ans_TablePlayerInfo() {
  SharedDtor();
}

void Ans_TablePlayerInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (this != default_instance_) {
  }
}

void Ans_TablePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_TablePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_TablePlayerInfo_descriptor_;
}

const Ans_TablePlayerInfo& Ans_TablePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_TablePlayerInfo* Ans_TablePlayerInfo::default_instance_ = NULL;

Ans_TablePlayerInfo* Ans_TablePlayerInfo::New() const {
  return new Ans_TablePlayerInfo;
}

void Ans_TablePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    userid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    isadmin_ = 0;
    win_ = 0;
    loss_ = 0;
    equal_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    esc_ = 0;
    coin_ = 0;
    points_ = 0;
    sex_ = 0;
    achieveid_ = 0;
    gameboxid_ = 0;
    islooker_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_TablePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // optional int32 userID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }

      // optional string nickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headUrl;
        break;
      }

      // optional string headUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isAdmin;
        break;
      }

      // optional int32 isAdmin = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isadmin_)));
          set_has_isadmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win;
        break;
      }

      // optional int32 win = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loss;
        break;
      }

      // optional int32 loss = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loss_)));
          set_has_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_equal;
        break;
      }

      // optional int32 equal = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equal_)));
          set_has_equal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_esc;
        break;
      }

      // optional int32 esc = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esc_)));
          set_has_esc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coin;
        break;
      }

      // optional int32 coin = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_points;
        break;
      }

      // optional int32 points = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sex;
        break;
      }

      // optional int32 sex = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_achieveID;
        break;
      }

      // optional int32 achieveID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieveID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieveid_)));
          set_has_achieveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gameBoxID;
        break;
      }

      // optional int32 gameBoxID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameBoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameboxid_)));
          set_has_gameboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isLooker;
        break;
      }

      // optional int32 isLooker = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLooker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islooker_)));
          set_has_islooker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_TablePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatID = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional string headUrl = 4;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->headurl(), output);
  }

  // optional int32 isAdmin = 5 [default = 0];
  if (has_isadmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isadmin(), output);
  }

  // optional int32 win = 6 [default = 0];
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win(), output);
  }

  // optional int32 loss = 7 [default = 0];
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->loss(), output);
  }

  // optional int32 equal = 8 [default = 0];
  if (has_equal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->equal(), output);
  }

  // optional int32 esc = 9 [default = 0];
  if (has_esc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->esc(), output);
  }

  // optional int32 coin = 10 [default = 0];
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->coin(), output);
  }

  // optional int32 points = 11 [default = 0];
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->points(), output);
  }

  // optional int32 sex = 12 [default = 0];
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sex(), output);
  }

  // optional int32 achieveID = 13;
  if (has_achieveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->achieveid(), output);
  }

  // optional int32 gameBoxID = 14;
  if (has_gameboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gameboxid(), output);
  }

  // optional int32 isLooker = 15;
  if (has_islooker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->islooker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_TablePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatID = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string headUrl = 4;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->headurl(), target);
  }

  // optional int32 isAdmin = 5 [default = 0];
  if (has_isadmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isadmin(), target);
  }

  // optional int32 win = 6 [default = 0];
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win(), target);
  }

  // optional int32 loss = 7 [default = 0];
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->loss(), target);
  }

  // optional int32 equal = 8 [default = 0];
  if (has_equal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->equal(), target);
  }

  // optional int32 esc = 9 [default = 0];
  if (has_esc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->esc(), target);
  }

  // optional int32 coin = 10 [default = 0];
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->coin(), target);
  }

  // optional int32 points = 11 [default = 0];
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->points(), target);
  }

  // optional int32 sex = 12 [default = 0];
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sex(), target);
  }

  // optional int32 achieveID = 13;
  if (has_achieveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->achieveid(), target);
  }

  // optional int32 gameBoxID = 14;
  if (has_gameboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gameboxid(), target);
  }

  // optional int32 isLooker = 15;
  if (has_islooker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->islooker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_TablePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatID = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 userID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string headUrl = 4;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }

    // optional int32 isAdmin = 5 [default = 0];
    if (has_isadmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isadmin());
    }

    // optional int32 win = 6 [default = 0];
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // optional int32 loss = 7 [default = 0];
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loss());
    }

    // optional int32 equal = 8 [default = 0];
    if (has_equal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equal());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 esc = 9 [default = 0];
    if (has_esc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esc());
    }

    // optional int32 coin = 10 [default = 0];
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 points = 11 [default = 0];
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional int32 sex = 12 [default = 0];
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 achieveID = 13;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieveid());
    }

    // optional int32 gameBoxID = 14;
    if (has_gameboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameboxid());
    }

    // optional int32 isLooker = 15;
    if (has_islooker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islooker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_TablePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_TablePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_TablePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_TablePlayerInfo::MergeFrom(const Ans_TablePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_isadmin()) {
      set_isadmin(from.isadmin());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
    if (from.has_equal()) {
      set_equal(from.equal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_esc()) {
      set_esc(from.esc());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_achieveid()) {
      set_achieveid(from.achieveid());
    }
    if (from.has_gameboxid()) {
      set_gameboxid(from.gameboxid());
    }
    if (from.has_islooker()) {
      set_islooker(from.islooker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_TablePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_TablePlayerInfo::CopyFrom(const Ans_TablePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_TablePlayerInfo::IsInitialized() const {

  return true;
}

void Ans_TablePlayerInfo::Swap(Ans_TablePlayerInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(headurl_, other->headurl_);
    std::swap(isadmin_, other->isadmin_);
    std::swap(win_, other->win_);
    std::swap(loss_, other->loss_);
    std::swap(equal_, other->equal_);
    std::swap(esc_, other->esc_);
    std::swap(coin_, other->coin_);
    std::swap(points_, other->points_);
    std::swap(sex_, other->sex_);
    std::swap(achieveid_, other->achieveid_);
    std::swap(gameboxid_, other->gameboxid_);
    std::swap(islooker_, other->islooker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_TablePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_TablePlayerInfo_descriptor_;
  metadata.reflection = Ans_TablePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Pro_AddTablePlayer::kPlayersFieldNumber;
#endif  // !_MSC_VER

Ans_Pro_AddTablePlayer::Ans_Pro_AddTablePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_AddTablePlayer::InitAsDefaultInstance() {
  players_ = const_cast< ::pf::Ans_TablePlayerInfo*>(&::pf::Ans_TablePlayerInfo::default_instance());
}

Ans_Pro_AddTablePlayer::Ans_Pro_AddTablePlayer(const Ans_Pro_AddTablePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_AddTablePlayer::SharedCtor() {
  _cached_size_ = 0;
  players_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_AddTablePlayer::~Ans_Pro_AddTablePlayer() {
  SharedDtor();
}

void Ans_Pro_AddTablePlayer::SharedDtor() {
  if (this != default_instance_) {
    delete players_;
  }
}

void Ans_Pro_AddTablePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_AddTablePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_AddTablePlayer_descriptor_;
}

const Ans_Pro_AddTablePlayer& Ans_Pro_AddTablePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_AddTablePlayer* Ans_Pro_AddTablePlayer::default_instance_ = NULL;

Ans_Pro_AddTablePlayer* Ans_Pro_AddTablePlayer::New() const {
  return new Ans_Pro_AddTablePlayer;
}

void Ans_Pro_AddTablePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_players()) {
      if (players_ != NULL) players_->::pf::Ans_TablePlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_AddTablePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pf.Ans_TablePlayerInfo players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Pro_AddTablePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pf.Ans_TablePlayerInfo players = 1;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_AddTablePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pf.Ans_TablePlayerInfo players = 1;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_AddTablePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pf.Ans_TablePlayerInfo players = 1;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_AddTablePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_AddTablePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_AddTablePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_AddTablePlayer::MergeFrom(const Ans_Pro_AddTablePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_players()) {
      mutable_players()->::pf::Ans_TablePlayerInfo::MergeFrom(from.players());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_AddTablePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_AddTablePlayer::CopyFrom(const Ans_Pro_AddTablePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_AddTablePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ans_Pro_AddTablePlayer::Swap(Ans_Pro_AddTablePlayer* other) {
  if (other != this) {
    std::swap(players_, other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_AddTablePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_AddTablePlayer_descriptor_;
  metadata.reflection = Ans_Pro_AddTablePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_SitDown::kRoomIDFieldNumber;
const int Req_SitDown::kSeatIDFieldNumber;
#endif  // !_MSC_VER

Req_SitDown::Req_SitDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_SitDown::InitAsDefaultInstance() {
}

Req_SitDown::Req_SitDown(const Req_SitDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_SitDown::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_SitDown::~Req_SitDown() {
  SharedDtor();
}

void Req_SitDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Req_SitDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_SitDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_SitDown_descriptor_;
}

const Req_SitDown& Req_SitDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_SitDown* Req_SitDown::default_instance_ = NULL;

Req_SitDown* Req_SitDown::New() const {
  return new Req_SitDown;
}

void Req_SitDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_SitDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seatID;
        break;
      }

      // required int32 seatID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_SitDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 seatID = 3;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_SitDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 seatID = 3;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_SitDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 seatID = 3;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_SitDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_SitDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_SitDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_SitDown::MergeFrom(const Req_SitDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_SitDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SitDown::CopyFrom(const Req_SitDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SitDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Req_SitDown::Swap(Req_SitDown* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_SitDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_SitDown_descriptor_;
  metadata.reflection = Req_SitDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Pro_NotifySitDown::kUserIDFieldNumber;
const int Ans_Pro_NotifySitDown::kSeatIDFieldNumber;
#endif  // !_MSC_VER

Ans_Pro_NotifySitDown::Ans_Pro_NotifySitDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_NotifySitDown::InitAsDefaultInstance() {
}

Ans_Pro_NotifySitDown::Ans_Pro_NotifySitDown(const Ans_Pro_NotifySitDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_NotifySitDown::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_NotifySitDown::~Ans_Pro_NotifySitDown() {
  SharedDtor();
}

void Ans_Pro_NotifySitDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_NotifySitDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_NotifySitDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_NotifySitDown_descriptor_;
}

const Ans_Pro_NotifySitDown& Ans_Pro_NotifySitDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_NotifySitDown* Ans_Pro_NotifySitDown::default_instance_ = NULL;

Ans_Pro_NotifySitDown* Ans_Pro_NotifySitDown::New() const {
  return new Ans_Pro_NotifySitDown;
}

void Ans_Pro_NotifySitDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_NotifySitDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatID;
        break;
      }

      // required int32 seatID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Pro_NotifySitDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 seatID = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_NotifySitDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 seatID = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_NotifySitDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 seatID = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_NotifySitDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_NotifySitDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_NotifySitDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_NotifySitDown::MergeFrom(const Ans_Pro_NotifySitDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_NotifySitDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_NotifySitDown::CopyFrom(const Ans_Pro_NotifySitDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_NotifySitDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ans_Pro_NotifySitDown::Swap(Ans_Pro_NotifySitDown* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_NotifySitDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_NotifySitDown_descriptor_;
  metadata.reflection = Ans_Pro_NotifySitDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_ReadyGame::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Req_ReadyGame::Req_ReadyGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_ReadyGame::InitAsDefaultInstance() {
}

Req_ReadyGame::Req_ReadyGame(const Req_ReadyGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_ReadyGame::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_ReadyGame::~Req_ReadyGame() {
  SharedDtor();
}

void Req_ReadyGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Req_ReadyGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_ReadyGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_ReadyGame_descriptor_;
}

const Req_ReadyGame& Req_ReadyGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_ReadyGame* Req_ReadyGame::default_instance_ = NULL;

Req_ReadyGame* Req_ReadyGame::New() const {
  return new Req_ReadyGame;
}

void Req_ReadyGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_ReadyGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_ReadyGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_ReadyGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_ReadyGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_ReadyGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_ReadyGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_ReadyGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_ReadyGame::MergeFrom(const Req_ReadyGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_ReadyGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_ReadyGame::CopyFrom(const Req_ReadyGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_ReadyGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Req_ReadyGame::Swap(Req_ReadyGame* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_ReadyGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_ReadyGame_descriptor_;
  metadata.reflection = Req_ReadyGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ans_Pro_ReadyGame::Ans_Pro_ReadyGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_ReadyGame::InitAsDefaultInstance() {
}

Ans_Pro_ReadyGame::Ans_Pro_ReadyGame(const Ans_Pro_ReadyGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_ReadyGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_ReadyGame::~Ans_Pro_ReadyGame() {
  SharedDtor();
}

void Ans_Pro_ReadyGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_ReadyGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_ReadyGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_ReadyGame_descriptor_;
}

const Ans_Pro_ReadyGame& Ans_Pro_ReadyGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_ReadyGame* Ans_Pro_ReadyGame::default_instance_ = NULL;

Ans_Pro_ReadyGame* Ans_Pro_ReadyGame::New() const {
  return new Ans_Pro_ReadyGame;
}

void Ans_Pro_ReadyGame::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_ReadyGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ans_Pro_ReadyGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_ReadyGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_ReadyGame::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_ReadyGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_ReadyGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_ReadyGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_ReadyGame::MergeFrom(const Ans_Pro_ReadyGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_ReadyGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_ReadyGame::CopyFrom(const Ans_Pro_ReadyGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_ReadyGame::IsInitialized() const {

  return true;
}

void Ans_Pro_ReadyGame::Swap(Ans_Pro_ReadyGame* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_ReadyGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_ReadyGame_descriptor_;
  metadata.reflection = Ans_Pro_ReadyGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_StandUp::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Req_StandUp::Req_StandUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_StandUp::InitAsDefaultInstance() {
}

Req_StandUp::Req_StandUp(const Req_StandUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_StandUp::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_StandUp::~Req_StandUp() {
  SharedDtor();
}

void Req_StandUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Req_StandUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_StandUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_StandUp_descriptor_;
}

const Req_StandUp& Req_StandUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_StandUp* Req_StandUp::default_instance_ = NULL;

Req_StandUp* Req_StandUp::New() const {
  return new Req_StandUp;
}

void Req_StandUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_StandUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_StandUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_StandUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_StandUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_StandUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_StandUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_StandUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_StandUp::MergeFrom(const Req_StandUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_StandUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_StandUp::CopyFrom(const Req_StandUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_StandUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Req_StandUp::Swap(Req_StandUp* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_StandUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_StandUp_descriptor_;
  metadata.reflection = Req_StandUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Pro_NotifyStandUp::kUserIDFieldNumber;
#endif  // !_MSC_VER

Ans_Pro_NotifyStandUp::Ans_Pro_NotifyStandUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_NotifyStandUp::InitAsDefaultInstance() {
}

Ans_Pro_NotifyStandUp::Ans_Pro_NotifyStandUp(const Ans_Pro_NotifyStandUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_NotifyStandUp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_NotifyStandUp::~Ans_Pro_NotifyStandUp() {
  SharedDtor();
}

void Ans_Pro_NotifyStandUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_NotifyStandUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_NotifyStandUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_NotifyStandUp_descriptor_;
}

const Ans_Pro_NotifyStandUp& Ans_Pro_NotifyStandUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_NotifyStandUp* Ans_Pro_NotifyStandUp::default_instance_ = NULL;

Ans_Pro_NotifyStandUp* Ans_Pro_NotifyStandUp::New() const {
  return new Ans_Pro_NotifyStandUp;
}

void Ans_Pro_NotifyStandUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_NotifyStandUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Pro_NotifyStandUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_NotifyStandUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_NotifyStandUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_NotifyStandUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_NotifyStandUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_NotifyStandUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_NotifyStandUp::MergeFrom(const Ans_Pro_NotifyStandUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_NotifyStandUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_NotifyStandUp::CopyFrom(const Ans_Pro_NotifyStandUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_NotifyStandUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ans_Pro_NotifyStandUp::Swap(Ans_Pro_NotifyStandUp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_NotifyStandUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_NotifyStandUp_descriptor_;
  metadata.reflection = Ans_Pro_NotifyStandUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_LeaveTable::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Req_LeaveTable::Req_LeaveTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_LeaveTable::InitAsDefaultInstance() {
}

Req_LeaveTable::Req_LeaveTable(const Req_LeaveTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_LeaveTable::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_LeaveTable::~Req_LeaveTable() {
  SharedDtor();
}

void Req_LeaveTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Req_LeaveTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_LeaveTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_LeaveTable_descriptor_;
}

const Req_LeaveTable& Req_LeaveTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_LeaveTable* Req_LeaveTable::default_instance_ = NULL;

Req_LeaveTable* Req_LeaveTable::New() const {
  return new Req_LeaveTable;
}

void Req_LeaveTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_LeaveTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_LeaveTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_LeaveTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_LeaveTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_LeaveTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_LeaveTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_LeaveTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_LeaveTable::MergeFrom(const Req_LeaveTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_LeaveTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_LeaveTable::CopyFrom(const Req_LeaveTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_LeaveTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Req_LeaveTable::Swap(Req_LeaveTable* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_LeaveTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_LeaveTable_descriptor_;
  metadata.reflection = Req_LeaveTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ans_Pro_LeaveTable::Ans_Pro_LeaveTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_LeaveTable::InitAsDefaultInstance() {
}

Ans_Pro_LeaveTable::Ans_Pro_LeaveTable(const Ans_Pro_LeaveTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_LeaveTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_LeaveTable::~Ans_Pro_LeaveTable() {
  SharedDtor();
}

void Ans_Pro_LeaveTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_LeaveTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_LeaveTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_LeaveTable_descriptor_;
}

const Ans_Pro_LeaveTable& Ans_Pro_LeaveTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_LeaveTable* Ans_Pro_LeaveTable::default_instance_ = NULL;

Ans_Pro_LeaveTable* Ans_Pro_LeaveTable::New() const {
  return new Ans_Pro_LeaveTable;
}

void Ans_Pro_LeaveTable::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_LeaveTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ans_Pro_LeaveTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_LeaveTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_LeaveTable::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_LeaveTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_LeaveTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_LeaveTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_LeaveTable::MergeFrom(const Ans_Pro_LeaveTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_LeaveTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_LeaveTable::CopyFrom(const Ans_Pro_LeaveTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_LeaveTable::IsInitialized() const {

  return true;
}

void Ans_Pro_LeaveTable::Swap(Ans_Pro_LeaveTable* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_LeaveTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_LeaveTable_descriptor_;
  metadata.reflection = Ans_Pro_LeaveTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Pro_DelTablePlayer::kUserIDFieldNumber;
#endif  // !_MSC_VER

Ans_Pro_DelTablePlayer::Ans_Pro_DelTablePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_DelTablePlayer::InitAsDefaultInstance() {
}

Ans_Pro_DelTablePlayer::Ans_Pro_DelTablePlayer(const Ans_Pro_DelTablePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_DelTablePlayer::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_DelTablePlayer::~Ans_Pro_DelTablePlayer() {
  SharedDtor();
}

void Ans_Pro_DelTablePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ans_Pro_DelTablePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_DelTablePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_DelTablePlayer_descriptor_;
}

const Ans_Pro_DelTablePlayer& Ans_Pro_DelTablePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_DelTablePlayer* Ans_Pro_DelTablePlayer::default_instance_ = NULL;

Ans_Pro_DelTablePlayer* Ans_Pro_DelTablePlayer::New() const {
  return new Ans_Pro_DelTablePlayer;
}

void Ans_Pro_DelTablePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_DelTablePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Pro_DelTablePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_DelTablePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_DelTablePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_DelTablePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_DelTablePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_DelTablePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_DelTablePlayer::MergeFrom(const Ans_Pro_DelTablePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_DelTablePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_DelTablePlayer::CopyFrom(const Ans_Pro_DelTablePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_DelTablePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ans_Pro_DelTablePlayer::Swap(Ans_Pro_DelTablePlayer* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_DelTablePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_DelTablePlayer_descriptor_;
  metadata.reflection = Ans_Pro_DelTablePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pro_GameMsg::kRoomIDFieldNumber;
const int Pro_GameMsg::kTableIDFieldNumber;
const int Pro_GameMsg::kGameCmdIDFieldNumber;
const int Pro_GameMsg::kParamBytesFieldNumber;
#endif  // !_MSC_VER

Pro_GameMsg::Pro_GameMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pro_GameMsg::InitAsDefaultInstance() {
}

Pro_GameMsg::Pro_GameMsg(const Pro_GameMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pro_GameMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  tableid_ = 0;
  gamecmdid_ = 0;
  parambytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pro_GameMsg::~Pro_GameMsg() {
  SharedDtor();
}

void Pro_GameMsg::SharedDtor() {
  if (parambytes_ != &::google::protobuf::internal::kEmptyString) {
    delete parambytes_;
  }
  if (this != default_instance_) {
  }
}

void Pro_GameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pro_GameMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pro_GameMsg_descriptor_;
}

const Pro_GameMsg& Pro_GameMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Pro_GameMsg* Pro_GameMsg::default_instance_ = NULL;

Pro_GameMsg* Pro_GameMsg::New() const {
  return new Pro_GameMsg;
}

void Pro_GameMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    tableid_ = 0;
    gamecmdid_ = 0;
    if (has_parambytes()) {
      if (parambytes_ != &::google::protobuf::internal::kEmptyString) {
        parambytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pro_GameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableID;
        break;
      }

      // optional int32 tableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameCmdID;
        break;
      }

      // required int32 gameCmdID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameCmdID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecmdid_)));
          set_has_gamecmdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_paramBytes;
        break;
      }

      // optional bytes paramBytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parambytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pro_GameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 tableID = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required int32 gameCmdID = 3;
  if (has_gamecmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecmdid(), output);
  }

  // optional bytes paramBytes = 4;
  if (has_parambytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->parambytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pro_GameMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 tableID = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required int32 gameCmdID = 3;
  if (has_gamecmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecmdid(), target);
  }

  // optional bytes paramBytes = 4;
  if (has_parambytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->parambytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pro_GameMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 tableID = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 gameCmdID = 3;
    if (has_gamecmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecmdid());
    }

    // optional bytes paramBytes = 4;
    if (has_parambytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parambytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pro_GameMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pro_GameMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pro_GameMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pro_GameMsg::MergeFrom(const Pro_GameMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_gamecmdid()) {
      set_gamecmdid(from.gamecmdid());
    }
    if (from.has_parambytes()) {
      set_parambytes(from.parambytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pro_GameMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pro_GameMsg::CopyFrom(const Pro_GameMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pro_GameMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void Pro_GameMsg::Swap(Pro_GameMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(tableid_, other->tableid_);
    std::swap(gamecmdid_, other->gamecmdid_);
    std::swap(parambytes_, other->parambytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pro_GameMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pro_GameMsg_descriptor_;
  metadata.reflection = Pro_GameMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Pro_TablePlayerInfoChange::kUserIDFieldNumber;
const int Ans_Pro_TablePlayerInfoChange::kInfosFieldNumber;
#endif  // !_MSC_VER

Ans_Pro_TablePlayerInfoChange::Ans_Pro_TablePlayerInfoChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Pro_TablePlayerInfoChange::InitAsDefaultInstance() {
  infos_ = const_cast< ::pf::Ans_TablePlayerInfo*>(&::pf::Ans_TablePlayerInfo::default_instance());
}

Ans_Pro_TablePlayerInfoChange::Ans_Pro_TablePlayerInfoChange(const Ans_Pro_TablePlayerInfoChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Pro_TablePlayerInfoChange::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Pro_TablePlayerInfoChange::~Ans_Pro_TablePlayerInfoChange() {
  SharedDtor();
}

void Ans_Pro_TablePlayerInfoChange::SharedDtor() {
  if (this != default_instance_) {
    delete infos_;
  }
}

void Ans_Pro_TablePlayerInfoChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Pro_TablePlayerInfoChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Pro_TablePlayerInfoChange_descriptor_;
}

const Ans_Pro_TablePlayerInfoChange& Ans_Pro_TablePlayerInfoChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Pro_TablePlayerInfoChange* Ans_Pro_TablePlayerInfoChange::default_instance_ = NULL;

Ans_Pro_TablePlayerInfoChange* Ans_Pro_TablePlayerInfoChange::New() const {
  return new Ans_Pro_TablePlayerInfoChange;
}

void Ans_Pro_TablePlayerInfoChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_infos()) {
      if (infos_ != NULL) infos_->::pf::Ans_TablePlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Pro_TablePlayerInfoChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // required .pf.Ans_TablePlayerInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Pro_TablePlayerInfoChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required .pf.Ans_TablePlayerInfo infos = 2;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Pro_TablePlayerInfoChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required .pf.Ans_TablePlayerInfo infos = 2;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Pro_TablePlayerInfoChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required .pf.Ans_TablePlayerInfo infos = 2;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Pro_TablePlayerInfoChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Pro_TablePlayerInfoChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Pro_TablePlayerInfoChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Pro_TablePlayerInfoChange::MergeFrom(const Ans_Pro_TablePlayerInfoChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_infos()) {
      mutable_infos()->::pf::Ans_TablePlayerInfo::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Pro_TablePlayerInfoChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Pro_TablePlayerInfoChange::CopyFrom(const Ans_Pro_TablePlayerInfoChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Pro_TablePlayerInfoChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ans_Pro_TablePlayerInfoChange::Swap(Ans_Pro_TablePlayerInfoChange* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Pro_TablePlayerInfoChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Pro_TablePlayerInfoChange_descriptor_;
  metadata.reflection = Ans_Pro_TablePlayerInfoChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrorMes::kErrorCodeFieldNumber;
const int ErrorMes::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

ErrorMes::ErrorMes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorMes::InitAsDefaultInstance() {
}

ErrorMes::ErrorMes(const ErrorMes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorMes::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorMes::~ErrorMes() {
  SharedDtor();
}

void ErrorMes::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void ErrorMes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorMes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorMes_descriptor_;
}

const ErrorMes& ErrorMes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

ErrorMes* ErrorMes::default_instance_ = NULL;

ErrorMes* ErrorMes::New() const {
  return new ErrorMes;
}

void ErrorMes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorMes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorMsg;
        break;
      }

      // required string errorMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorMes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required string errorMsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorMes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required string errorMsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorMes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required string errorMsg = 2;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorMes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorMes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorMes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorMes::MergeFrom(const ErrorMes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorMes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMes::CopyFrom(const ErrorMes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ErrorMes::Swap(ErrorMes* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorMes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorMes_descriptor_;
  metadata.reflection = ErrorMes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req_Test::kUidFieldNumber;
const int Req_Test::kNameFieldNumber;
const int Req_Test::kBufFieldNumber;
#endif  // !_MSC_VER

Req_Test::Req_Test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req_Test::InitAsDefaultInstance() {
}

Req_Test::Req_Test(const Req_Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req_Test::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req_Test::~Req_Test() {
  SharedDtor();
}

void Req_Test::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    delete buf_;
  }
  if (this != default_instance_) {
  }
}

void Req_Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req_Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req_Test_descriptor_;
}

const Req_Test& Req_Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Req_Test* Req_Test::default_instance_ = NULL;

Req_Test* Req_Test::New() const {
  return new Req_Test;
}

void Req_Test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_buf()) {
      if (buf_ != &::google::protobuf::internal::kEmptyString) {
        buf_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req_Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buf;
        break;
      }

      // optional bytes buf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req_Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // required string name = 2 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional bytes buf = 3;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->buf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req_Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // required string name = 2 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bytes buf = 3;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->buf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req_Test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required string name = 2 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes buf = 3;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req_Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req_Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req_Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req_Test::MergeFrom(const Req_Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_buf()) {
      set_buf(from.buf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req_Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_Test::CopyFrom(const Req_Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_Test::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Req_Test::Swap(Req_Test* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(buf_, other->buf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req_Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req_Test_descriptor_;
  metadata.reflection = Req_Test_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ans_Test::kUidFieldNumber;
const int Ans_Test::kBufFieldNumber;
const int Ans_Test::kNameFieldNumber;
#endif  // !_MSC_VER

Ans_Test::Ans_Test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ans_Test::InitAsDefaultInstance() {
}

Ans_Test::Ans_Test(const Ans_Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ans_Test::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ans_Test::~Ans_Test() {
  SharedDtor();
}

void Ans_Test::SharedDtor() {
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    delete buf_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Ans_Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ans_Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ans_Test_descriptor_;
}

const Ans_Test& Ans_Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pf_2eproto();
  return *default_instance_;
}

Ans_Test* Ans_Test::default_instance_ = NULL;

Ans_Test* Ans_Test::New() const {
  return new Ans_Test;
}

void Ans_Test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_buf()) {
      if (buf_ != &::google::protobuf::internal::kEmptyString) {
        buf_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ans_Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buf;
        break;
      }

      // optional bytes buf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ans_Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional bytes buf = 2;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->buf(), output);
  }

  // required string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ans_Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional bytes buf = 2;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buf(), target);
  }

  // required string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ans_Test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bytes buf = 2;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf());
    }

    // required string name = 3 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ans_Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ans_Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ans_Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ans_Test::MergeFrom(const Ans_Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_buf()) {
      set_buf(from.buf());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ans_Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ans_Test::CopyFrom(const Ans_Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ans_Test::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Ans_Test::Swap(Ans_Test* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(buf_, other->buf_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ans_Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ans_Test_descriptor_;
  metadata.reflection = Ans_Test_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pf

// @@protoc_insertion_point(global_scope)
